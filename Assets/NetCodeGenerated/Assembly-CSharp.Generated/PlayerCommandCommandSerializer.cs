//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;


namespace Assembly_CSharp.Generated
{
    public struct PlayerCommandSerializer : ICommandDataSerializer<PlayerCommand>
    {
        public void Serialize(ref DataStreamWriter writer, in PlayerCommand data)
        {
            writer.WriteUInt(data.right);
            writer.WriteUInt(data.left);
            writer.WriteUInt(data.thrust);
            writer.WriteUInt(data.reverseThrust);
            writer.WriteUInt(data.selfDestruct);
            writer.WriteUInt(data.shoot);
            writer.WriteFloat(data.mouseX);
            writer.WriteFloat(data.mouseY);
        }

        public void Deserialize(ref DataStreamReader reader, ref PlayerCommand data)
        {
            data.right = (byte) reader.ReadUInt();
            data.left = (byte) reader.ReadUInt();
            data.thrust = (byte) reader.ReadUInt();
            data.reverseThrust = (byte) reader.ReadUInt();
            data.selfDestruct = (byte) reader.ReadUInt();
            data.shoot = (byte) reader.ReadUInt();
            data.mouseX = reader.ReadFloat();
            data.mouseY = reader.ReadFloat();
        }

        public void Serialize(ref DataStreamWriter writer, in PlayerCommand data, in PlayerCommand baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedUIntDelta(data.right, baseline.right, compressionModel);
            writer.WritePackedUIntDelta(data.left, baseline.left, compressionModel);
            writer.WritePackedUIntDelta(data.thrust, baseline.thrust, compressionModel);
            writer.WritePackedUIntDelta(data.reverseThrust, baseline.reverseThrust, compressionModel);
            writer.WritePackedUIntDelta(data.selfDestruct, baseline.selfDestruct, compressionModel);
            writer.WritePackedUIntDelta(data.shoot, baseline.shoot, compressionModel);
            writer.WritePackedFloatDelta(data.mouseX, baseline.mouseX, compressionModel);
            writer.WritePackedFloatDelta(data.mouseY, baseline.mouseY, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref PlayerCommand data, in PlayerCommand baseline, NetworkCompressionModel compressionModel)
        {
            data.right = (byte) reader.ReadPackedUIntDelta(baseline.right, compressionModel);
            data.left = (byte) reader.ReadPackedUIntDelta(baseline.left, compressionModel);
            data.thrust = (byte) reader.ReadPackedUIntDelta(baseline.thrust, compressionModel);
            data.reverseThrust = (byte) reader.ReadPackedUIntDelta(baseline.reverseThrust, compressionModel);
            data.selfDestruct = (byte) reader.ReadPackedUIntDelta(baseline.selfDestruct, compressionModel);
            data.shoot = (byte) reader.ReadPackedUIntDelta(baseline.shoot, compressionModel);
            data.mouseX = reader.ReadPackedFloatDelta(baseline.mouseX, compressionModel);
            data.mouseY = reader.ReadPackedFloatDelta(baseline.mouseY, compressionModel);
        }
    }
    public class PlayerCommandSendCommandSystem : CommandSendSystem<PlayerCommandSerializer, PlayerCommand>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class PlayerCommandReceiveCommandSystem : CommandReceiveSystem<PlayerCommandSerializer, PlayerCommand>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
