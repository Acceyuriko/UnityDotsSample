//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;
using Unity.NetCode.Tests;


namespace Unity.NetCode.EditorTests.Generated
{
    public struct UnityNetCodeTestsTestInputSerializer : ICommandDataSerializer<Unity.NetCode.Tests.TestInput>
    {
        public void Serialize(ref DataStreamWriter writer, in Unity.NetCode.Tests.TestInput data)
        {
            writer.WriteInt((int) data.Value);
        }

        public void Deserialize(ref DataStreamReader reader, ref Unity.NetCode.Tests.TestInput data)
        {
            data.Value = (int) reader.ReadInt();
        }

        public void Serialize(ref DataStreamWriter writer, in Unity.NetCode.Tests.TestInput data, in Unity.NetCode.Tests.TestInput baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedIntDelta((int) data.Value, (int) baseline.Value, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref Unity.NetCode.Tests.TestInput data, in Unity.NetCode.Tests.TestInput baseline, NetworkCompressionModel compressionModel)
        {
            data.Value = (int) reader.ReadPackedIntDelta((int) baseline.Value, compressionModel);
        }
    }
    public class UnityNetCodeTestsTestInputSendCommandSystem : CommandSendSystem<UnityNetCodeTestsTestInputSerializer, Unity.NetCode.Tests.TestInput>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class UnityNetCodeTestsTestInputReceiveCommandSystem : CommandReceiveSystem<UnityNetCodeTestsTestInputSerializer, Unity.NetCode.Tests.TestInput>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
