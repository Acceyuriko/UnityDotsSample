//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using System;
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.NetCode.LowLevel.Unsafe;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;
using Unity.NetCode.Tests;

namespace Unity.NetCode.EditorTests.Generated
{
    [BurstCompile]
    public struct UnityNetCodeTestsGhostValueSerializerGhostComponentSerializer
    {
        static GhostComponentSerializer.State GetState()
        {
            // This needs to be lazy initialized because otherwise there is a depenency on the static initialization order which breaks il2cpp builds due to TYpeManager not being initialized yet
            if (!s_StateInitialized)
            {
                s_State = new GhostComponentSerializer.State
                {
                    GhostFieldsHash = 2417687383206634917,
                    ExcludeFromComponentCollectionHash = 1,
                    ComponentType = ComponentType.ReadWrite<Unity.NetCode.Tests.GhostValueSerializer>(),
                    ComponentSize = UnsafeUtility.SizeOf<Unity.NetCode.Tests.GhostValueSerializer>(),
                    SnapshotSize = UnsafeUtility.SizeOf<Snapshot>(),
                    ChangeMaskBits = ChangeMaskBits,
                    SendMask = GhostComponentSerializer.SendMask.Interpolated | GhostComponentSerializer.SendMask.Predicted,
                    SendToOwner = SendToOwnerType.All,
                    SendForChildEntities = 1,
                    VariantHash = 0,
                    CopyToSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyToSnapshot),
                    CopyFromSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyFromSnapshot),
                    RestoreFromBackup =
                        new PortableFunctionPointer<GhostComponentSerializer.RestoreFromBackupDelegate>(RestoreFromBackup),
                    PredictDelta = new PortableFunctionPointer<GhostComponentSerializer.PredictDeltaDelegate>(PredictDelta),
                    CalculateChangeMask =
                        new PortableFunctionPointer<GhostComponentSerializer.CalculateChangeMaskDelegate>(
                            CalculateChangeMask),
                    Serialize = new PortableFunctionPointer<GhostComponentSerializer.SerializeDelegate>(Serialize),
                    Deserialize = new PortableFunctionPointer<GhostComponentSerializer.DeserializeDelegate>(Deserialize),
                    #if UNITY_EDITOR || DEVELOPMENT_BUILD
                    ReportPredictionErrors = new PortableFunctionPointer<GhostComponentSerializer.ReportPredictionErrorsDelegate>(ReportPredictionErrors),
                    #endif
                };
                #if UNITY_EDITOR || DEVELOPMENT_BUILD
                s_State.NumPredictionErrorNames = GetPredictionErrorNames(ref s_State.PredictionErrorNames);
                #endif
                s_StateInitialized = true;
            }
            return s_State;
        }
        private static bool s_StateInitialized;
        private static GhostComponentSerializer.State s_State;
        public static GhostComponentSerializer.State State => GetState();
        public struct Snapshot
        {
            public uint BoolValue;
            public int IntValue;
            public uint UIntValue;
            public int FloatValue;
            public float UnquantizedFloatValue;
            public int Float2Value_x;
            public int Float2Value_y;
            public float UnquantizedFloat2Value_x;
            public float UnquantizedFloat2Value_y;
            public int Float3Value_x;
            public int Float3Value_y;
            public int Float3Value_z;
            public float UnquantizedFloat3Value_x;
            public float UnquantizedFloat3Value_y;
            public float UnquantizedFloat3Value_z;
            public int Float4Value_x;
            public int Float4Value_y;
            public int Float4Value_z;
            public int Float4Value_w;
            public float UnquantizedFloat4Value_x;
            public float UnquantizedFloat4Value_y;
            public float UnquantizedFloat4Value_z;
            public float UnquantizedFloat4Value_w;
            public int QuaternionValueX;
            public int QuaternionValueY;
            public int QuaternionValueZ;
            public int QuaternionValueW;
            public float UnquantizedQuaternionValueX;
            public float UnquantizedQuaternionValueY;
            public float UnquantizedQuaternionValueZ;
            public float UnquantizedQuaternionValueW;
            public FixedString32 StringValue32;
            public FixedString64 StringValue64;
            public FixedString128 StringValue128;
            public FixedString512 StringValue512;
            public FixedString4096 StringValue4096;
            public int EntityValue;
            public uint EntityValueSpawnTick;
        }
        public const int ChangeMaskBits = 19;
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyToSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData, snapshotOffset + snapshotStride*i);
                ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostValueSerializer>(componentData, componentStride*i);
                ref var serializerState = ref GhostComponentSerializer.TypeCast<GhostSerializerState>(stateData, 0);
                snapshot.BoolValue = component.BoolValue?1u:0;
                snapshot.IntValue = (int) component.IntValue;
                snapshot.UIntValue = (uint)component.UIntValue;
                snapshot.FloatValue = (int) math.round(component.FloatValue * 10);
                snapshot.UnquantizedFloatValue = component.UnquantizedFloatValue;
                snapshot.Float2Value_x = (int) math.round(component.Float2Value.x * 10);
                snapshot.Float2Value_y = (int) math.round(component.Float2Value.y * 10);
                snapshot.UnquantizedFloat2Value_x = component.UnquantizedFloat2Value.x;
                snapshot.UnquantizedFloat2Value_y = component.UnquantizedFloat2Value.y;
                snapshot.Float3Value_x = (int) math.round(component.Float3Value.x * 10);
                snapshot.Float3Value_y = (int) math.round(component.Float3Value.y * 10);
                snapshot.Float3Value_z = (int) math.round(component.Float3Value.z * 10);
                snapshot.UnquantizedFloat3Value_x = component.UnquantizedFloat3Value.x;
                snapshot.UnquantizedFloat3Value_y = component.UnquantizedFloat3Value.y;
                snapshot.UnquantizedFloat3Value_z = component.UnquantizedFloat3Value.z;
                snapshot.Float4Value_x = (int) math.round(component.Float4Value.x * 10);
                snapshot.Float4Value_y = (int) math.round(component.Float4Value.y * 10);
                snapshot.Float4Value_z = (int) math.round(component.Float4Value.z * 10);
                snapshot.Float4Value_w = (int) math.round(component.Float4Value.w * 10);
                snapshot.UnquantizedFloat4Value_x = component.UnquantizedFloat4Value.x;
                snapshot.UnquantizedFloat4Value_y = component.UnquantizedFloat4Value.y;
                snapshot.UnquantizedFloat4Value_z = component.UnquantizedFloat4Value.z;
                snapshot.UnquantizedFloat4Value_w = component.UnquantizedFloat4Value.w;
                snapshot.QuaternionValueX = (int)math.round(component.QuaternionValue.value.x * 1000);
                snapshot.QuaternionValueY = (int)math.round(component.QuaternionValue.value.y * 1000);
                snapshot.QuaternionValueZ = (int)math.round(component.QuaternionValue.value.z * 1000);
                snapshot.QuaternionValueW = (int)math.round(component.QuaternionValue.value.w * 1000);
                snapshot.UnquantizedQuaternionValueX = component.UnquantizedQuaternionValue.value.x;
                snapshot.UnquantizedQuaternionValueY = component.UnquantizedQuaternionValue.value.y;
                snapshot.UnquantizedQuaternionValueZ = component.UnquantizedQuaternionValue.value.z;
                snapshot.UnquantizedQuaternionValueW = component.UnquantizedQuaternionValue.value.w;
                snapshot.StringValue32 = component.StringValue32;
                snapshot.StringValue64 = component.StringValue64;
                snapshot.StringValue128 = component.StringValue128;
                snapshot.StringValue512 = component.StringValue512;
                snapshot.StringValue4096 = component.StringValue4096;
                snapshot.EntityValue = 0;
                snapshot.EntityValueSpawnTick = 0;
                if (serializerState.GhostFromEntity.HasComponent(component.EntityValue))
                {
                    var ghostComponent = serializerState.GhostFromEntity[component.EntityValue];
                    snapshot.EntityValue = ghostComponent.ghostId;
                    snapshot.EntityValueSpawnTick = ghostComponent.spawnTick;
                }
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);
                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);
                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);
                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);
                //Compute the required owner mask for the components and buffers by retrievieng the ghost owner id from the data for the current tick.
                if (snapshotInterpolationData.GhostOwner > 0)
                {
                    var requiredOwnerMask = snapshotInterpolationData.GhostOwner == deserializerState.GhostOwner
                        ? SendToOwnerType.SendToOwner
                        : SendToOwnerType.SendToNonOwner;
                    if ((deserializerState.SendToOwner & requiredOwnerMask) == 0)
                        continue;
                }
                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;
                float snapshotInterpolationFactorRaw = snapshotInterpolationData.InterpolationFactor;
                float snapshotInterpolationFactor = snapshotInterpolationFactorRaw;
                ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostValueSerializer>(componentData, componentStride*i);
                component.BoolValue = snapshotBefore.BoolValue != 0;
                component.IntValue = (int) snapshotBefore.IntValue;
                component.UIntValue = (uint) snapshotBefore.UIntValue;
                component.FloatValue = snapshotBefore.FloatValue * 0.1f;
                component.UnquantizedFloatValue = snapshotBefore.UnquantizedFloatValue;
                component.Float2Value = new float2(snapshotBefore.Float2Value_x * 0.1f, snapshotBefore.Float2Value_y * 0.1f);
                component.UnquantizedFloat2Value = new float2(snapshotBefore.UnquantizedFloat2Value_x, snapshotBefore.UnquantizedFloat2Value_y);
                component.Float3Value = new float3(snapshotBefore.Float3Value_x * 0.1f, snapshotBefore.Float3Value_y * 0.1f, snapshotBefore.Float3Value_z * 0.1f);
                component.UnquantizedFloat3Value = new float3(snapshotBefore.UnquantizedFloat3Value_x, snapshotBefore.UnquantizedFloat3Value_y, snapshotBefore.UnquantizedFloat3Value_z);
                component.Float4Value = new float4(snapshotBefore.Float4Value_x * 0.1f, snapshotBefore.Float4Value_y * 0.1f, snapshotBefore.Float4Value_z * 0.1f, snapshotBefore.Float4Value_w * 0.1f);
                component.UnquantizedFloat4Value = new float4(snapshotBefore.UnquantizedFloat4Value_x, snapshotBefore.UnquantizedFloat4Value_y, snapshotBefore.UnquantizedFloat4Value_z, snapshotBefore.UnquantizedFloat4Value_w);
                component.QuaternionValue = math.normalize(new quaternion(snapshotBefore.QuaternionValueX * 0.001f, snapshotBefore.QuaternionValueY * 0.001f, snapshotBefore.QuaternionValueZ * 0.001f, snapshotBefore.QuaternionValueW * 0.001f));
                component.UnquantizedQuaternionValue = new quaternion(snapshotBefore.UnquantizedQuaternionValueX, snapshotBefore.UnquantizedQuaternionValueY, snapshotBefore.UnquantizedQuaternionValueZ, snapshotBefore.UnquantizedQuaternionValueW);
                component.StringValue32 = snapshotBefore.StringValue32;
                component.StringValue64 = snapshotBefore.StringValue64;
                component.StringValue128 = snapshotBefore.StringValue128;
                component.StringValue512 = snapshotBefore.StringValue512;
                component.StringValue4096 = snapshotBefore.StringValue4096;
                component.EntityValue = Entity.Null;
                if (snapshotBefore.EntityValue != 0)
                {
                    if (deserializerState.GhostMap.TryGetValue(new SpawnedGhost{ghostId = snapshotBefore.EntityValue, spawnTick = snapshotBefore.EntityValueSpawnTick}, out var ghostEnt))
                        component.EntityValue = ghostEnt;
                }

            }
        }


        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.RestoreFromBackupDelegate))]
        private static void RestoreFromBackup(IntPtr componentData, IntPtr backupData)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostValueSerializer>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostValueSerializer>(backupData, 0);
            component.BoolValue = backup.BoolValue;
            component.IntValue = backup.IntValue;
            component.UIntValue = backup.UIntValue;
            component.FloatValue = backup.FloatValue;
            component.UnquantizedFloatValue = backup.UnquantizedFloatValue;
            component.Float2Value.x = backup.Float2Value.x;
            component.Float2Value.y = backup.Float2Value.y;
            component.UnquantizedFloat2Value.x = backup.UnquantizedFloat2Value.x;
            component.UnquantizedFloat2Value.y = backup.UnquantizedFloat2Value.y;
            component.Float3Value.x = backup.Float3Value.x;
            component.Float3Value.y = backup.Float3Value.y;
            component.Float3Value.z = backup.Float3Value.z;
            component.UnquantizedFloat3Value.x = backup.UnquantizedFloat3Value.x;
            component.UnquantizedFloat3Value.y = backup.UnquantizedFloat3Value.y;
            component.UnquantizedFloat3Value.z = backup.UnquantizedFloat3Value.z;
            component.Float4Value.x = backup.Float4Value.x;
            component.Float4Value.y = backup.Float4Value.y;
            component.Float4Value.z = backup.Float4Value.z;
            component.Float4Value.w = backup.Float4Value.w;
            component.UnquantizedFloat4Value.x = backup.UnquantizedFloat4Value.x;
            component.UnquantizedFloat4Value.y = backup.UnquantizedFloat4Value.y;
            component.UnquantizedFloat4Value.z = backup.UnquantizedFloat4Value.z;
            component.UnquantizedFloat4Value.w = backup.UnquantizedFloat4Value.w;
            component.QuaternionValue = backup.QuaternionValue;
            component.UnquantizedQuaternionValue = backup.UnquantizedQuaternionValue;
            component.StringValue32 = backup.StringValue32;
            component.StringValue64 = backup.StringValue64;
            component.StringValue128 = backup.StringValue128;
            component.StringValue512 = backup.StringValue512;
            component.StringValue4096 = backup.StringValue4096;
            component.EntityValue = backup.EntityValue;
        }

        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.PredictDeltaDelegate))]
        private static void PredictDelta(IntPtr snapshotData, IntPtr baseline1Data, IntPtr baseline2Data, ref GhostDeltaPredictor predictor)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline1 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline1Data);
            ref var baseline2 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline2Data);
            snapshot.BoolValue = (uint)predictor.PredictInt((int)snapshot.BoolValue, (int)baseline1.BoolValue, (int)baseline2.BoolValue);
            snapshot.IntValue = predictor.PredictInt(snapshot.IntValue, baseline1.IntValue, baseline2.IntValue);
            snapshot.UIntValue = (uint)predictor.PredictInt((int)snapshot.UIntValue, (int)baseline1.UIntValue, (int)baseline2.UIntValue);
            snapshot.FloatValue = predictor.PredictInt(snapshot.FloatValue, baseline1.FloatValue, baseline2.FloatValue);
            snapshot.Float2Value_x = predictor.PredictInt(snapshot.Float2Value_x, baseline1.Float2Value_x, baseline2.Float2Value_x);
            snapshot.Float2Value_y = predictor.PredictInt(snapshot.Float2Value_y, baseline1.Float2Value_y, baseline2.Float2Value_y);
            snapshot.Float3Value_x = predictor.PredictInt(snapshot.Float3Value_x, baseline1.Float3Value_x, baseline2.Float3Value_x);
            snapshot.Float3Value_y = predictor.PredictInt(snapshot.Float3Value_y, baseline1.Float3Value_y, baseline2.Float3Value_y);
            snapshot.Float3Value_z = predictor.PredictInt(snapshot.Float3Value_z, baseline1.Float3Value_z, baseline2.Float3Value_z);
            snapshot.Float4Value_x = predictor.PredictInt(snapshot.Float4Value_x, baseline1.Float4Value_x, baseline2.Float4Value_x);
            snapshot.Float4Value_y = predictor.PredictInt(snapshot.Float4Value_y, baseline1.Float4Value_y, baseline2.Float4Value_y);
            snapshot.Float4Value_z = predictor.PredictInt(snapshot.Float4Value_z, baseline1.Float4Value_z, baseline2.Float4Value_z);
            snapshot.Float4Value_w = predictor.PredictInt(snapshot.Float4Value_w, baseline1.Float4Value_w, baseline2.Float4Value_w);
            snapshot.QuaternionValueX = predictor.PredictInt(snapshot.QuaternionValueX, baseline1.QuaternionValueX, baseline2.QuaternionValueX);
            snapshot.QuaternionValueY = predictor.PredictInt(snapshot.QuaternionValueY, baseline1.QuaternionValueY, baseline2.QuaternionValueY);
            snapshot.QuaternionValueZ = predictor.PredictInt(snapshot.QuaternionValueZ, baseline1.QuaternionValueZ, baseline2.QuaternionValueZ);
            snapshot.QuaternionValueW = predictor.PredictInt(snapshot.QuaternionValueW, baseline1.QuaternionValueW, baseline2.QuaternionValueW);
            snapshot.EntityValue = predictor.PredictInt(snapshot.EntityValue, baseline1.EntityValue, baseline2.EntityValue);
            snapshot.EntityValueSpawnTick = (uint)predictor.PredictInt((int)snapshot.EntityValueSpawnTick, (int)baseline1.EntityValueSpawnTick, (int)baseline2.EntityValue);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CalculateChangeMaskDelegate))]
        private static void CalculateChangeMask(IntPtr snapshotData, IntPtr baselineData, IntPtr bits, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask;
            changeMask = (snapshot.BoolValue != baseline.BoolValue) ? 1u : 0;
            changeMask |= (snapshot.IntValue != baseline.IntValue) ? (1u<<1) : 0;
            changeMask |= (snapshot.UIntValue != baseline.UIntValue) ? (1u<<2) : 0;
            changeMask |= (snapshot.FloatValue != baseline.FloatValue) ? (1u<<3) : 0;
            changeMask |= (snapshot.UnquantizedFloatValue != baseline.UnquantizedFloatValue) ? (1u<<4) : 0;
            changeMask |= (snapshot.Float2Value_x != baseline.Float2Value_x) ? (1u<<5) : 0;
            changeMask |= (snapshot.Float2Value_y != baseline.Float2Value_y) ? (1u<<5) : 0;
            changeMask |= (snapshot.UnquantizedFloat2Value_x != baseline.UnquantizedFloat2Value_x) ? (1u<<6) : 0;
            changeMask |= (snapshot.UnquantizedFloat2Value_y != baseline.UnquantizedFloat2Value_y) ? (1u<<6) : 0;
            changeMask |= (snapshot.Float3Value_x != baseline.Float3Value_x) ? (1u<<7) : 0;
            changeMask |= (snapshot.Float3Value_y != baseline.Float3Value_y) ? (1u<<7) : 0;
            changeMask |= (snapshot.Float3Value_z != baseline.Float3Value_z) ? (1u<<7) : 0;
            changeMask |= (snapshot.UnquantizedFloat3Value_x != baseline.UnquantizedFloat3Value_x) ? (1u<<8) : 0;
            changeMask |= (snapshot.UnquantizedFloat3Value_y != baseline.UnquantizedFloat3Value_y) ? (1u<<8) : 0;
            changeMask |= (snapshot.UnquantizedFloat3Value_z != baseline.UnquantizedFloat3Value_z) ? (1u<<8) : 0;
            changeMask |= (snapshot.Float4Value_x != baseline.Float4Value_x) ? (1u<<9) : 0;
            changeMask |= (snapshot.Float4Value_y != baseline.Float4Value_y) ? (1u<<9) : 0;
            changeMask |= (snapshot.Float4Value_z != baseline.Float4Value_z) ? (1u<<9) : 0;
            changeMask |= (snapshot.Float4Value_w != baseline.Float4Value_w) ? (1u<<9) : 0;
            changeMask |= (snapshot.UnquantizedFloat4Value_x != baseline.UnquantizedFloat4Value_x) ? (1u<<10) : 0;
            changeMask |= (snapshot.UnquantizedFloat4Value_y != baseline.UnquantizedFloat4Value_y) ? (1u<<10) : 0;
            changeMask |= (snapshot.UnquantizedFloat4Value_z != baseline.UnquantizedFloat4Value_z) ? (1u<<10) : 0;
            changeMask |= (snapshot.UnquantizedFloat4Value_w != baseline.UnquantizedFloat4Value_w) ? (1u<<10) : 0;
            changeMask |= (snapshot.QuaternionValueX != baseline.QuaternionValueX ||
                        snapshot.QuaternionValueY != baseline.QuaternionValueY ||
                        snapshot.QuaternionValueZ != baseline.QuaternionValueZ ||
                        snapshot.QuaternionValueW != baseline.QuaternionValueW) ? (1u<<11) : 0;
            changeMask |= (snapshot.UnquantizedQuaternionValueX != baseline.UnquantizedQuaternionValueX ||
                        snapshot.UnquantizedQuaternionValueY != baseline.UnquantizedQuaternionValueY ||
                        snapshot.UnquantizedQuaternionValueZ != baseline.UnquantizedQuaternionValueZ ||
                        snapshot.UnquantizedQuaternionValueW != baseline.UnquantizedQuaternionValueW) ? (1u<<12) : 0;
            changeMask |= snapshot.StringValue32.Equals(baseline.StringValue32) ? 0 : (1u<<13);
            changeMask |= snapshot.StringValue64.Equals(baseline.StringValue64) ? 0 : (1u<<14);
            changeMask |= snapshot.StringValue128.Equals(baseline.StringValue128) ? 0 : (1u<<15);
            changeMask |= snapshot.StringValue512.Equals(baseline.StringValue512) ? 0 : (1u<<16);
            changeMask |= snapshot.StringValue4096.Equals(baseline.StringValue4096) ? 0 : (1u<<17);
            changeMask |= (snapshot.EntityValue != baseline.EntityValue || snapshot.EntityValueSpawnTick != baseline.EntityValueSpawnTick) ? (1u<<18) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 19);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.SerializeDelegate))]
        private static void Serialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamWriter writer, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedUIntDelta(snapshot.BoolValue, baseline.BoolValue, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.IntValue, baseline.IntValue, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedUIntDelta(snapshot.UIntValue, baseline.UIntValue, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatValue, baseline.FloatValue, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloatValue, baseline.UnquantizedFloatValue, compressionModel);
            if ((changeMask & (1 << 5)) != 0)
                writer.WritePackedIntDelta(snapshot.Float2Value_x, baseline.Float2Value_x, compressionModel);
            if ((changeMask & (1 << 5)) != 0)
                writer.WritePackedIntDelta(snapshot.Float2Value_y, baseline.Float2Value_y, compressionModel);
            if ((changeMask & (1 << 6)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloat2Value_x, baseline.UnquantizedFloat2Value_x, compressionModel);
            if ((changeMask & (1 << 6)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloat2Value_y, baseline.UnquantizedFloat2Value_y, compressionModel);
            if ((changeMask & (1 << 7)) != 0)
                writer.WritePackedIntDelta(snapshot.Float3Value_x, baseline.Float3Value_x, compressionModel);
            if ((changeMask & (1 << 7)) != 0)
                writer.WritePackedIntDelta(snapshot.Float3Value_y, baseline.Float3Value_y, compressionModel);
            if ((changeMask & (1 << 7)) != 0)
                writer.WritePackedIntDelta(snapshot.Float3Value_z, baseline.Float3Value_z, compressionModel);
            if ((changeMask & (1 << 8)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloat3Value_x, baseline.UnquantizedFloat3Value_x, compressionModel);
            if ((changeMask & (1 << 8)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloat3Value_y, baseline.UnquantizedFloat3Value_y, compressionModel);
            if ((changeMask & (1 << 8)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloat3Value_z, baseline.UnquantizedFloat3Value_z, compressionModel);
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedIntDelta(snapshot.Float4Value_x, baseline.Float4Value_x, compressionModel);
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedIntDelta(snapshot.Float4Value_y, baseline.Float4Value_y, compressionModel);
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedIntDelta(snapshot.Float4Value_z, baseline.Float4Value_z, compressionModel);
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedIntDelta(snapshot.Float4Value_w, baseline.Float4Value_w, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloat4Value_x, baseline.UnquantizedFloat4Value_x, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloat4Value_y, baseline.UnquantizedFloat4Value_y, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloat4Value_z, baseline.UnquantizedFloat4Value_z, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnquantizedFloat4Value_w, baseline.UnquantizedFloat4Value_w, compressionModel);
            if ((changeMask & (1 << 11)) != 0)
            {
                writer.WritePackedIntDelta(snapshot.QuaternionValueX, baseline.QuaternionValueX, compressionModel);
                writer.WritePackedIntDelta(snapshot.QuaternionValueY, baseline.QuaternionValueY, compressionModel);
                writer.WritePackedIntDelta(snapshot.QuaternionValueZ, baseline.QuaternionValueZ, compressionModel);
                writer.WritePackedIntDelta(snapshot.QuaternionValueW, baseline.QuaternionValueW, compressionModel);
            }
            if ((changeMask & (1 << 12)) != 0)
            {
                writer.WritePackedFloatDelta(snapshot.UnquantizedQuaternionValueX, baseline.UnquantizedQuaternionValueX, compressionModel);
                writer.WritePackedFloatDelta(snapshot.UnquantizedQuaternionValueY, baseline.UnquantizedQuaternionValueY, compressionModel);
                writer.WritePackedFloatDelta(snapshot.UnquantizedQuaternionValueZ, baseline.UnquantizedQuaternionValueZ, compressionModel);
                writer.WritePackedFloatDelta(snapshot.UnquantizedQuaternionValueW, baseline.UnquantizedQuaternionValueW, compressionModel);
            }
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedFixedString32Delta(snapshot.StringValue32, baseline.StringValue32, compressionModel);
            if ((changeMask & (1 << 14)) != 0)
                writer.WritePackedFixedString64Delta(snapshot.StringValue64, baseline.StringValue64, compressionModel);
            if ((changeMask & (1 << 15)) != 0)
                writer.WritePackedFixedString128Delta(snapshot.StringValue128, baseline.StringValue128, compressionModel);
            if ((changeMask & (1 << 16)) != 0)
                writer.WritePackedFixedString512Delta(snapshot.StringValue512, baseline.StringValue512, compressionModel);
            if ((changeMask & (1 << 17)) != 0)
                writer.WritePackedFixedString4096Delta(snapshot.StringValue4096, baseline.StringValue4096, compressionModel);
            if ((changeMask & (1 << 18)) != 0)
            {
                writer.WritePackedIntDelta(snapshot.EntityValue, baseline.EntityValue, compressionModel);
                writer.WritePackedUIntDelta(snapshot.EntityValueSpawnTick, baseline.EntityValueSpawnTick, compressionModel);
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.DeserializeDelegate))]
        private static void Deserialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamReader reader, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.BoolValue = reader.ReadPackedUIntDelta(baseline.BoolValue, compressionModel);
            else
                snapshot.BoolValue = baseline.BoolValue;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.IntValue = reader.ReadPackedIntDelta(baseline.IntValue, compressionModel);
            else
                snapshot.IntValue = baseline.IntValue;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.UIntValue = reader.ReadPackedUIntDelta(baseline.UIntValue, compressionModel);
            else
                snapshot.UIntValue = baseline.UIntValue;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.FloatValue = reader.ReadPackedIntDelta(baseline.FloatValue, compressionModel);
            else
                snapshot.FloatValue = baseline.FloatValue;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.UnquantizedFloatValue = reader.ReadPackedFloatDelta(baseline.UnquantizedFloatValue, compressionModel);
            else
                snapshot.UnquantizedFloatValue = baseline.UnquantizedFloatValue;
            if ((changeMask & (1 << 5)) != 0)
                snapshot.Float2Value_x = reader.ReadPackedIntDelta(baseline.Float2Value_x, compressionModel);
            else
                snapshot.Float2Value_x = baseline.Float2Value_x;
            if ((changeMask & (1 << 5)) != 0)
                snapshot.Float2Value_y = reader.ReadPackedIntDelta(baseline.Float2Value_y, compressionModel);
            else
                snapshot.Float2Value_y = baseline.Float2Value_y;
            if ((changeMask & (1 << 6)) != 0)
                snapshot.UnquantizedFloat2Value_x = reader.ReadPackedFloatDelta(baseline.UnquantizedFloat2Value_x, compressionModel);
            else
                snapshot.UnquantizedFloat2Value_x = baseline.UnquantizedFloat2Value_x;
            if ((changeMask & (1 << 6)) != 0)
                snapshot.UnquantizedFloat2Value_y = reader.ReadPackedFloatDelta(baseline.UnquantizedFloat2Value_y, compressionModel);
            else
                snapshot.UnquantizedFloat2Value_y = baseline.UnquantizedFloat2Value_y;
            if ((changeMask & (1 << 7)) != 0)
                snapshot.Float3Value_x = reader.ReadPackedIntDelta(baseline.Float3Value_x, compressionModel);
            else
                snapshot.Float3Value_x = baseline.Float3Value_x;
            if ((changeMask & (1 << 7)) != 0)
                snapshot.Float3Value_y = reader.ReadPackedIntDelta(baseline.Float3Value_y, compressionModel);
            else
                snapshot.Float3Value_y = baseline.Float3Value_y;
            if ((changeMask & (1 << 7)) != 0)
                snapshot.Float3Value_z = reader.ReadPackedIntDelta(baseline.Float3Value_z, compressionModel);
            else
                snapshot.Float3Value_z = baseline.Float3Value_z;
            if ((changeMask & (1 << 8)) != 0)
                snapshot.UnquantizedFloat3Value_x = reader.ReadPackedFloatDelta(baseline.UnquantizedFloat3Value_x, compressionModel);
            else
                snapshot.UnquantizedFloat3Value_x = baseline.UnquantizedFloat3Value_x;
            if ((changeMask & (1 << 8)) != 0)
                snapshot.UnquantizedFloat3Value_y = reader.ReadPackedFloatDelta(baseline.UnquantizedFloat3Value_y, compressionModel);
            else
                snapshot.UnquantizedFloat3Value_y = baseline.UnquantizedFloat3Value_y;
            if ((changeMask & (1 << 8)) != 0)
                snapshot.UnquantizedFloat3Value_z = reader.ReadPackedFloatDelta(baseline.UnquantizedFloat3Value_z, compressionModel);
            else
                snapshot.UnquantizedFloat3Value_z = baseline.UnquantizedFloat3Value_z;
            if ((changeMask & (1 << 9)) != 0)
                snapshot.Float4Value_x = reader.ReadPackedIntDelta(baseline.Float4Value_x, compressionModel);
            else
                snapshot.Float4Value_x = baseline.Float4Value_x;
            if ((changeMask & (1 << 9)) != 0)
                snapshot.Float4Value_y = reader.ReadPackedIntDelta(baseline.Float4Value_y, compressionModel);
            else
                snapshot.Float4Value_y = baseline.Float4Value_y;
            if ((changeMask & (1 << 9)) != 0)
                snapshot.Float4Value_z = reader.ReadPackedIntDelta(baseline.Float4Value_z, compressionModel);
            else
                snapshot.Float4Value_z = baseline.Float4Value_z;
            if ((changeMask & (1 << 9)) != 0)
                snapshot.Float4Value_w = reader.ReadPackedIntDelta(baseline.Float4Value_w, compressionModel);
            else
                snapshot.Float4Value_w = baseline.Float4Value_w;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.UnquantizedFloat4Value_x = reader.ReadPackedFloatDelta(baseline.UnquantizedFloat4Value_x, compressionModel);
            else
                snapshot.UnquantizedFloat4Value_x = baseline.UnquantizedFloat4Value_x;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.UnquantizedFloat4Value_y = reader.ReadPackedFloatDelta(baseline.UnquantizedFloat4Value_y, compressionModel);
            else
                snapshot.UnquantizedFloat4Value_y = baseline.UnquantizedFloat4Value_y;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.UnquantizedFloat4Value_z = reader.ReadPackedFloatDelta(baseline.UnquantizedFloat4Value_z, compressionModel);
            else
                snapshot.UnquantizedFloat4Value_z = baseline.UnquantizedFloat4Value_z;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.UnquantizedFloat4Value_w = reader.ReadPackedFloatDelta(baseline.UnquantizedFloat4Value_w, compressionModel);
            else
                snapshot.UnquantizedFloat4Value_w = baseline.UnquantizedFloat4Value_w;
            if ((changeMask & (1 << 11)) != 0)
            {
                snapshot.QuaternionValueX = reader.ReadPackedIntDelta(baseline.QuaternionValueX, compressionModel);
                snapshot.QuaternionValueY = reader.ReadPackedIntDelta(baseline.QuaternionValueY, compressionModel);
                snapshot.QuaternionValueZ = reader.ReadPackedIntDelta(baseline.QuaternionValueZ, compressionModel);
                snapshot.QuaternionValueW = reader.ReadPackedIntDelta(baseline.QuaternionValueW, compressionModel);
            }
            else
            {
                snapshot.QuaternionValueX = baseline.QuaternionValueX;
                snapshot.QuaternionValueY = baseline.QuaternionValueY;
                snapshot.QuaternionValueZ = baseline.QuaternionValueZ;
                snapshot.QuaternionValueW = baseline.QuaternionValueW;
            }
            if ((changeMask & (1 << 12)) != 0)
            {
                snapshot.UnquantizedQuaternionValueX = reader.ReadPackedFloatDelta(baseline.UnquantizedQuaternionValueX, compressionModel);
                snapshot.UnquantizedQuaternionValueY = reader.ReadPackedFloatDelta(baseline.UnquantizedQuaternionValueY, compressionModel);
                snapshot.UnquantizedQuaternionValueZ = reader.ReadPackedFloatDelta(baseline.UnquantizedQuaternionValueZ, compressionModel);
                snapshot.UnquantizedQuaternionValueW = reader.ReadPackedFloatDelta(baseline.UnquantizedQuaternionValueW, compressionModel);
            }
            else
            {
                snapshot.UnquantizedQuaternionValueX = baseline.UnquantizedQuaternionValueX;
                snapshot.UnquantizedQuaternionValueY = baseline.UnquantizedQuaternionValueY;
                snapshot.UnquantizedQuaternionValueZ = baseline.UnquantizedQuaternionValueZ;
                snapshot.UnquantizedQuaternionValueW = baseline.UnquantizedQuaternionValueW;
            }
            if ((changeMask & (1 << 13)) != 0)
                snapshot.StringValue32 = reader.ReadPackedFixedString32Delta(baseline.StringValue32, compressionModel);
            else
                snapshot.StringValue32 = baseline.StringValue32;
            if ((changeMask & (1 << 14)) != 0)
                snapshot.StringValue64 = reader.ReadPackedFixedString64Delta(baseline.StringValue64, compressionModel);
            else
                snapshot.StringValue64 = baseline.StringValue64;
            if ((changeMask & (1 << 15)) != 0)
                snapshot.StringValue128 = reader.ReadPackedFixedString128Delta(baseline.StringValue128, compressionModel);
            else
                snapshot.StringValue128 = baseline.StringValue128;
            if ((changeMask & (1 << 16)) != 0)
                snapshot.StringValue512 = reader.ReadPackedFixedString512Delta(baseline.StringValue512, compressionModel);
            else
                snapshot.StringValue512 = baseline.StringValue512;
            if ((changeMask & (1 << 17)) != 0)
                snapshot.StringValue4096 = reader.ReadPackedFixedString4096Delta(baseline.StringValue4096, compressionModel);
            else
                snapshot.StringValue4096 = baseline.StringValue4096;
            if ((changeMask & (1 << 18)) != 0)
            {
                snapshot.EntityValue = reader.ReadPackedIntDelta(baseline.EntityValue, compressionModel);
                snapshot.EntityValueSpawnTick = reader.ReadPackedUIntDelta(baseline.EntityValueSpawnTick, compressionModel);
            }
            else
            {
                snapshot.EntityValue = baseline.EntityValue;
                snapshot.EntityValueSpawnTick = baseline.EntityValueSpawnTick;
            }
        }
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.ReportPredictionErrorsDelegate))]
        private static void ReportPredictionErrors(IntPtr componentData, IntPtr backupData, ref UnsafeList<float> errors)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostValueSerializer>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostValueSerializer>(backupData, 0);
            int errorIndex = 0;
            errors[errorIndex] = math.max(errors[errorIndex], (component.BoolValue != backup.BoolValue) ? 1 : 0);
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.IntValue - backup.IntValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.UIntValue > backup.UIntValue) ?
                (component.UIntValue - backup.UIntValue) :
                (backup.UIntValue - component.UIntValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.FloatValue - backup.FloatValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.UnquantizedFloatValue - backup.UnquantizedFloatValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Float2Value, backup.Float2Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.UnquantizedFloat2Value, backup.UnquantizedFloat2Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Float3Value, backup.Float3Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.UnquantizedFloat3Value, backup.UnquantizedFloat3Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Float4Value, backup.Float4Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.UnquantizedFloat4Value, backup.UnquantizedFloat4Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.QuaternionValue.value, backup.QuaternionValue.value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.UnquantizedQuaternionValue.value, backup.UnquantizedQuaternionValue.value));
            ++errorIndex;
        }
        private static int GetPredictionErrorNames(ref FixedString512 names)
        {
            int nameCount = 0;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("BoolValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("IntValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UIntValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("FloatValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UnquantizedFloatValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Float2Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UnquantizedFloat2Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Float3Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UnquantizedFloat3Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Float4Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UnquantizedFloat4Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("QuaternionValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UnquantizedQuaternionValue"));
            ++nameCount;
            return nameCount;
        }
        #endif
    }
}
