//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using System;
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.NetCode.LowLevel.Unsafe;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;
using Unity.NetCode.Tests;

namespace Unity.NetCode.EditorTests.Generated
{
    [BurstCompile]
    public struct UnityNetCodeTestsGhostGenTestTypeFlatGhostComponentSerializer
    {
        static GhostComponentSerializer.State GetState()
        {
            // This needs to be lazy initialized because otherwise there is a depenency on the static initialization order which breaks il2cpp builds due to TYpeManager not being initialized yet
            if (!s_StateInitialized)
            {
                s_State = new GhostComponentSerializer.State
                {
                    GhostFieldsHash = 12249196905415137741,
                    ExcludeFromComponentCollectionHash = 1,
                    ComponentType = ComponentType.ReadWrite<Unity.NetCode.Tests.GhostGenTestTypeFlat>(),
                    ComponentSize = UnsafeUtility.SizeOf<Unity.NetCode.Tests.GhostGenTestTypeFlat>(),
                    SnapshotSize = UnsafeUtility.SizeOf<Snapshot>(),
                    ChangeMaskBits = ChangeMaskBits,
                    SendMask = GhostComponentSerializer.SendMask.Interpolated | GhostComponentSerializer.SendMask.Predicted,
                    SendToOwner = SendToOwnerType.All,
                    SendForChildEntities = 1,
                    VariantHash = 0,
                    CopyToSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyToSnapshot),
                    CopyFromSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyFromSnapshot),
                    RestoreFromBackup =
                        new PortableFunctionPointer<GhostComponentSerializer.RestoreFromBackupDelegate>(RestoreFromBackup),
                    PredictDelta = new PortableFunctionPointer<GhostComponentSerializer.PredictDeltaDelegate>(PredictDelta),
                    CalculateChangeMask =
                        new PortableFunctionPointer<GhostComponentSerializer.CalculateChangeMaskDelegate>(
                            CalculateChangeMask),
                    Serialize = new PortableFunctionPointer<GhostComponentSerializer.SerializeDelegate>(Serialize),
                    Deserialize = new PortableFunctionPointer<GhostComponentSerializer.DeserializeDelegate>(Deserialize),
                    #if UNITY_EDITOR || DEVELOPMENT_BUILD
                    ReportPredictionErrors = new PortableFunctionPointer<GhostComponentSerializer.ReportPredictionErrorsDelegate>(ReportPredictionErrors),
                    #endif
                };
                #if UNITY_EDITOR || DEVELOPMENT_BUILD
                s_State.NumPredictionErrorNames = GetPredictionErrorNames(ref s_State.PredictionErrorNames);
                #endif
                s_StateInitialized = true;
            }
            return s_State;
        }
        private static bool s_StateInitialized;
        private static GhostComponentSerializer.State s_State;
        public static GhostComponentSerializer.State State => GetState();
        public struct Snapshot
        {
            public int Composed_Int3_x;
            public int Composed_Int3_y;
            public int Composed_Int3_z;
            public int Int3_x;
            public int Int3_y;
            public int Int3_z;
            public uint Composed_UInt3_x;
            public uint Composed_UInt3_y;
            public uint Composed_UInt3_z;
            public uint UInt3_x;
            public uint UInt3_y;
            public uint UInt3_z;
            public uint ComposedPartial_UInt3_x;
            public uint ComposedPartial_UInt3_y;
            public uint Partial_UInt3_x;
            public uint Partial_UInt3_y;
            public int Composed_FloatX_x_x;
            public int Composed_FloatX_x_y;
            public int Composed_FloatX_y_x;
            public int Composed_FloatX_y_y;
            public int Composed_FloatX_y_z;
            public int Composed_FloatX_z_x;
            public int Composed_FloatX_z_y;
            public int Composed_FloatX_z_z;
            public int Composed_FloatX_z_w;
            public int FloatX_x_x;
            public int FloatX_x_y;
            public int FloatX_y_x;
            public int FloatX_y_y;
            public int FloatX_y_z;
            public int FloatX_z_x;
            public int FloatX_z_y;
            public int FloatX_z_z;
            public int FloatX_z_w;
            public int IntValue;
            public uint UIntValue;
            public uint BoolValue;
            public float Unquantized_FloatValue;
            public float Unquantized_Interpolated_FloatValue;
            public int FloatValue;
            public int Interpolated_FloatValue;
            public int Float2Value_x;
            public int Float2Value_y;
            public int Interpolated_Float2Value_x;
            public int Interpolated_Float2Value_y;
            public float Unquantized_Float2Value_x;
            public float Unquantized_Float2Value_y;
            public float Interpolated_Unquantized_Float2Value_x;
            public float Interpolated_Unquantized_Float2Value_y;
            public int Float3Value_x;
            public int Float3Value_y;
            public int Float3Value_z;
            public int Interpolated_Float3Value_x;
            public int Interpolated_Float3Value_y;
            public int Interpolated_Float3Value_z;
            public float Unquantized_Float3Value_x;
            public float Unquantized_Float3Value_y;
            public float Unquantized_Float3Value_z;
            public float Interpolated_Unquantized_Float3Value_x;
            public float Interpolated_Unquantized_Float3Value_y;
            public float Interpolated_Unquantized_Float3Value_z;
            public int Float4Value_x;
            public int Float4Value_y;
            public int Float4Value_z;
            public int Float4Value_w;
            public int Interpolated_Float4Value_x;
            public int Interpolated_Float4Value_y;
            public int Interpolated_Float4Value_z;
            public int Interpolated_Float4Value_w;
            public float Unquantized_Float4Value_x;
            public float Unquantized_Float4Value_y;
            public float Unquantized_Float4Value_z;
            public float Unquantized_Float4Value_w;
            public float Interpolated_Unquantized_Float4Value_x;
            public float Interpolated_Unquantized_Float4Value_y;
            public float Interpolated_Unquantized_Float4Value_z;
            public float Interpolated_Unquantized_Float4Value_w;
            public int QuaternionValueX;
            public int QuaternionValueY;
            public int QuaternionValueZ;
            public int QuaternionValueW;
            public int Interpolated_QuaternionValueX;
            public int Interpolated_QuaternionValueY;
            public int Interpolated_QuaternionValueZ;
            public int Interpolated_QuaternionValueW;
            public float Unquantized_QuaternionValueX;
            public float Unquantized_QuaternionValueY;
            public float Unquantized_QuaternionValueZ;
            public float Unquantized_QuaternionValueW;
            public float Interpolated_Unquantized_QuaternionValueX;
            public float Interpolated_Unquantized_QuaternionValueY;
            public float Interpolated_Unquantized_QuaternionValueZ;
            public float Interpolated_Unquantized_QuaternionValueW;
            public FixedString32 String32Value;
            public FixedString64 String64Value;
            public FixedString128 String128Value;
            public FixedString512 String512Value;
            public FixedString4096 String4096Value;
            public int EntityValue;
            public uint EntityValueSpawnTick;
        }
        public const int ChangeMaskBits = 47;
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyToSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData, snapshotOffset + snapshotStride*i);
                ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypeFlat>(componentData, componentStride*i);
                ref var serializerState = ref GhostComponentSerializer.TypeCast<GhostSerializerState>(stateData, 0);
                snapshot.Composed_Int3_x = (int) component.Composed_Int3.x;
                snapshot.Composed_Int3_y = (int) component.Composed_Int3.y;
                snapshot.Composed_Int3_z = (int) component.Composed_Int3.z;
                snapshot.Int3_x = (int) component.Int3.x;
                snapshot.Int3_y = (int) component.Int3.y;
                snapshot.Int3_z = (int) component.Int3.z;
                snapshot.Composed_UInt3_x = (uint)component.Composed_UInt3.x;
                snapshot.Composed_UInt3_y = (uint)component.Composed_UInt3.y;
                snapshot.Composed_UInt3_z = (uint)component.Composed_UInt3.z;
                snapshot.UInt3_x = (uint)component.UInt3.x;
                snapshot.UInt3_y = (uint)component.UInt3.y;
                snapshot.UInt3_z = (uint)component.UInt3.z;
                snapshot.ComposedPartial_UInt3_x = (uint)component.ComposedPartial_UInt3.x;
                snapshot.ComposedPartial_UInt3_y = (uint)component.ComposedPartial_UInt3.y;
                snapshot.Partial_UInt3_x = (uint)component.Partial_UInt3.x;
                snapshot.Partial_UInt3_y = (uint)component.Partial_UInt3.y;
                snapshot.Composed_FloatX_x_x = (int) math.round(component.Composed_FloatX.x.x * 10);
                snapshot.Composed_FloatX_x_y = (int) math.round(component.Composed_FloatX.x.y * 10);
                snapshot.Composed_FloatX_y_x = (int) math.round(component.Composed_FloatX.y.x * 10);
                snapshot.Composed_FloatX_y_y = (int) math.round(component.Composed_FloatX.y.y * 10);
                snapshot.Composed_FloatX_y_z = (int) math.round(component.Composed_FloatX.y.z * 10);
                snapshot.Composed_FloatX_z_x = (int) math.round(component.Composed_FloatX.z.x * 10);
                snapshot.Composed_FloatX_z_y = (int) math.round(component.Composed_FloatX.z.y * 10);
                snapshot.Composed_FloatX_z_z = (int) math.round(component.Composed_FloatX.z.z * 10);
                snapshot.Composed_FloatX_z_w = (int) math.round(component.Composed_FloatX.z.w * 10);
                snapshot.FloatX_x_x = (int) math.round(component.FloatX.x.x * 10);
                snapshot.FloatX_x_y = (int) math.round(component.FloatX.x.y * 10);
                snapshot.FloatX_y_x = (int) math.round(component.FloatX.y.x * 10);
                snapshot.FloatX_y_y = (int) math.round(component.FloatX.y.y * 10);
                snapshot.FloatX_y_z = (int) math.round(component.FloatX.y.z * 10);
                snapshot.FloatX_z_x = (int) math.round(component.FloatX.z.x * 10);
                snapshot.FloatX_z_y = (int) math.round(component.FloatX.z.y * 10);
                snapshot.FloatX_z_z = (int) math.round(component.FloatX.z.z * 10);
                snapshot.FloatX_z_w = (int) math.round(component.FloatX.z.w * 10);
                snapshot.IntValue = (int) component.IntValue;
                snapshot.UIntValue = (uint)component.UIntValue;
                snapshot.BoolValue = component.BoolValue?1u:0;
                snapshot.Unquantized_FloatValue = component.Unquantized_FloatValue;
                snapshot.Unquantized_Interpolated_FloatValue = component.Unquantized_Interpolated_FloatValue;
                snapshot.FloatValue = (int) math.round(component.FloatValue * 10);
                snapshot.Interpolated_FloatValue = (int) math.round(component.Interpolated_FloatValue * 10);
                snapshot.Float2Value_x = (int) math.round(component.Float2Value.x * 10);
                snapshot.Float2Value_y = (int) math.round(component.Float2Value.y * 10);
                snapshot.Interpolated_Float2Value_x = (int) math.round(component.Interpolated_Float2Value.x * 10);
                snapshot.Interpolated_Float2Value_y = (int) math.round(component.Interpolated_Float2Value.y * 10);
                snapshot.Unquantized_Float2Value_x = component.Unquantized_Float2Value.x;
                snapshot.Unquantized_Float2Value_y = component.Unquantized_Float2Value.y;
                snapshot.Interpolated_Unquantized_Float2Value_x = component.Interpolated_Unquantized_Float2Value.x;
                snapshot.Interpolated_Unquantized_Float2Value_y = component.Interpolated_Unquantized_Float2Value.y;
                snapshot.Float3Value_x = (int) math.round(component.Float3Value.x * 10);
                snapshot.Float3Value_y = (int) math.round(component.Float3Value.y * 10);
                snapshot.Float3Value_z = (int) math.round(component.Float3Value.z * 10);
                snapshot.Interpolated_Float3Value_x = (int) math.round(component.Interpolated_Float3Value.x * 10);
                snapshot.Interpolated_Float3Value_y = (int) math.round(component.Interpolated_Float3Value.y * 10);
                snapshot.Interpolated_Float3Value_z = (int) math.round(component.Interpolated_Float3Value.z * 10);
                snapshot.Unquantized_Float3Value_x = component.Unquantized_Float3Value.x;
                snapshot.Unquantized_Float3Value_y = component.Unquantized_Float3Value.y;
                snapshot.Unquantized_Float3Value_z = component.Unquantized_Float3Value.z;
                snapshot.Interpolated_Unquantized_Float3Value_x = component.Interpolated_Unquantized_Float3Value.x;
                snapshot.Interpolated_Unquantized_Float3Value_y = component.Interpolated_Unquantized_Float3Value.y;
                snapshot.Interpolated_Unquantized_Float3Value_z = component.Interpolated_Unquantized_Float3Value.z;
                snapshot.Float4Value_x = (int) math.round(component.Float4Value.x * 10);
                snapshot.Float4Value_y = (int) math.round(component.Float4Value.y * 10);
                snapshot.Float4Value_z = (int) math.round(component.Float4Value.z * 10);
                snapshot.Float4Value_w = (int) math.round(component.Float4Value.w * 10);
                snapshot.Interpolated_Float4Value_x = (int) math.round(component.Interpolated_Float4Value.x * 10);
                snapshot.Interpolated_Float4Value_y = (int) math.round(component.Interpolated_Float4Value.y * 10);
                snapshot.Interpolated_Float4Value_z = (int) math.round(component.Interpolated_Float4Value.z * 10);
                snapshot.Interpolated_Float4Value_w = (int) math.round(component.Interpolated_Float4Value.w * 10);
                snapshot.Unquantized_Float4Value_x = component.Unquantized_Float4Value.x;
                snapshot.Unquantized_Float4Value_y = component.Unquantized_Float4Value.y;
                snapshot.Unquantized_Float4Value_z = component.Unquantized_Float4Value.z;
                snapshot.Unquantized_Float4Value_w = component.Unquantized_Float4Value.w;
                snapshot.Interpolated_Unquantized_Float4Value_x = component.Interpolated_Unquantized_Float4Value.x;
                snapshot.Interpolated_Unquantized_Float4Value_y = component.Interpolated_Unquantized_Float4Value.y;
                snapshot.Interpolated_Unquantized_Float4Value_z = component.Interpolated_Unquantized_Float4Value.z;
                snapshot.Interpolated_Unquantized_Float4Value_w = component.Interpolated_Unquantized_Float4Value.w;
                snapshot.QuaternionValueX = (int)math.round(component.QuaternionValue.value.x * 1000);
                snapshot.QuaternionValueY = (int)math.round(component.QuaternionValue.value.y * 1000);
                snapshot.QuaternionValueZ = (int)math.round(component.QuaternionValue.value.z * 1000);
                snapshot.QuaternionValueW = (int)math.round(component.QuaternionValue.value.w * 1000);
                snapshot.Interpolated_QuaternionValueX = (int)math.round(component.Interpolated_QuaternionValue.value.x * 1000);
                snapshot.Interpolated_QuaternionValueY = (int)math.round(component.Interpolated_QuaternionValue.value.y * 1000);
                snapshot.Interpolated_QuaternionValueZ = (int)math.round(component.Interpolated_QuaternionValue.value.z * 1000);
                snapshot.Interpolated_QuaternionValueW = (int)math.round(component.Interpolated_QuaternionValue.value.w * 1000);
                snapshot.Unquantized_QuaternionValueX = component.Unquantized_QuaternionValue.value.x;
                snapshot.Unquantized_QuaternionValueY = component.Unquantized_QuaternionValue.value.y;
                snapshot.Unquantized_QuaternionValueZ = component.Unquantized_QuaternionValue.value.z;
                snapshot.Unquantized_QuaternionValueW = component.Unquantized_QuaternionValue.value.w;
                snapshot.Interpolated_Unquantized_QuaternionValueX = component.Interpolated_Unquantized_QuaternionValue.value.x;
                snapshot.Interpolated_Unquantized_QuaternionValueY = component.Interpolated_Unquantized_QuaternionValue.value.y;
                snapshot.Interpolated_Unquantized_QuaternionValueZ = component.Interpolated_Unquantized_QuaternionValue.value.z;
                snapshot.Interpolated_Unquantized_QuaternionValueW = component.Interpolated_Unquantized_QuaternionValue.value.w;
                snapshot.String32Value = component.String32Value;
                snapshot.String64Value = component.String64Value;
                snapshot.String128Value = component.String128Value;
                snapshot.String512Value = component.String512Value;
                snapshot.String4096Value = component.String4096Value;
                snapshot.EntityValue = 0;
                snapshot.EntityValueSpawnTick = 0;
                if (serializerState.GhostFromEntity.HasComponent(component.EntityValue))
                {
                    var ghostComponent = serializerState.GhostFromEntity[component.EntityValue];
                    snapshot.EntityValue = ghostComponent.ghostId;
                    snapshot.EntityValueSpawnTick = ghostComponent.spawnTick;
                }
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);
                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);
                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);
                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);
                //Compute the required owner mask for the components and buffers by retrievieng the ghost owner id from the data for the current tick.
                if (snapshotInterpolationData.GhostOwner > 0)
                {
                    var requiredOwnerMask = snapshotInterpolationData.GhostOwner == deserializerState.GhostOwner
                        ? SendToOwnerType.SendToOwner
                        : SendToOwnerType.SendToNonOwner;
                    if ((deserializerState.SendToOwner & requiredOwnerMask) == 0)
                        continue;
                }
                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;
                float snapshotInterpolationFactorRaw = snapshotInterpolationData.InterpolationFactor;
                float snapshotInterpolationFactor = snapshotInterpolationFactorRaw;
                ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypeFlat>(componentData, componentStride*i);
                component.Composed_Int3.x = (int) snapshotBefore.Composed_Int3_x;
                component.Composed_Int3.y = (int) snapshotBefore.Composed_Int3_y;
                component.Composed_Int3.z = (int) snapshotBefore.Composed_Int3_z;
                component.Int3.x = (int) snapshotBefore.Int3_x;
                component.Int3.y = (int) snapshotBefore.Int3_y;
                component.Int3.z = (int) snapshotBefore.Int3_z;
                component.Composed_UInt3.x = (uint) snapshotBefore.Composed_UInt3_x;
                component.Composed_UInt3.y = (uint) snapshotBefore.Composed_UInt3_y;
                component.Composed_UInt3.z = (uint) snapshotBefore.Composed_UInt3_z;
                component.UInt3.x = (uint) snapshotBefore.UInt3_x;
                component.UInt3.y = (uint) snapshotBefore.UInt3_y;
                component.UInt3.z = (uint) snapshotBefore.UInt3_z;
                component.ComposedPartial_UInt3.x = (uint) snapshotBefore.ComposedPartial_UInt3_x;
                component.ComposedPartial_UInt3.y = (uint) snapshotBefore.ComposedPartial_UInt3_y;
                component.Partial_UInt3.x = (uint) snapshotBefore.Partial_UInt3_x;
                component.Partial_UInt3.y = (uint) snapshotBefore.Partial_UInt3_y;
                component.Composed_FloatX.x = new float2(snapshotBefore.Composed_FloatX_x_x * 0.1f, snapshotBefore.Composed_FloatX_x_y * 0.1f);
                component.Composed_FloatX.y = new float3(snapshotBefore.Composed_FloatX_y_x * 0.1f, snapshotBefore.Composed_FloatX_y_y * 0.1f, snapshotBefore.Composed_FloatX_y_z * 0.1f);
                component.Composed_FloatX.z = new float4(snapshotBefore.Composed_FloatX_z_x * 0.1f, snapshotBefore.Composed_FloatX_z_y * 0.1f, snapshotBefore.Composed_FloatX_z_z * 0.1f, snapshotBefore.Composed_FloatX_z_w * 0.1f);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var FloatX_x_Before = new float2(snapshotBefore.FloatX_x_x * 0.1f, snapshotBefore.FloatX_x_y * 0.1f);
                var FloatX_x_After = new float2(snapshotAfter.FloatX_x_x * 0.1f, snapshotAfter.FloatX_x_y * 0.1f);
                component.FloatX.x = math.lerp(FloatX_x_Before, FloatX_x_After, snapshotInterpolationFactor);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var FloatX_y_Before = new float3(snapshotBefore.FloatX_y_x * 0.1f, snapshotBefore.FloatX_y_y * 0.1f, snapshotBefore.FloatX_y_z * 0.1f);
                var FloatX_y_After = new float3(snapshotAfter.FloatX_y_x * 0.1f, snapshotAfter.FloatX_y_y * 0.1f, snapshotAfter.FloatX_y_z * 0.1f);
                component.FloatX.y = math.lerp(FloatX_y_Before, FloatX_y_After, snapshotInterpolationFactor);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var FloatX_z_Before = new float4(snapshotBefore.FloatX_z_x * 0.1f, snapshotBefore.FloatX_z_y * 0.1f, snapshotBefore.FloatX_z_z * 0.1f, snapshotBefore.FloatX_z_w * 0.1f);
                var FloatX_z_After = new float4(snapshotAfter.FloatX_z_x * 0.1f, snapshotAfter.FloatX_z_y * 0.1f, snapshotAfter.FloatX_z_z * 0.1f, snapshotAfter.FloatX_z_w * 0.1f);
                component.FloatX.z = math.lerp(FloatX_z_Before, FloatX_z_After, snapshotInterpolationFactor);
                component.IntValue = (int) snapshotBefore.IntValue;
                component.UIntValue = (uint) snapshotBefore.UIntValue;
                component.BoolValue = snapshotBefore.BoolValue != 0;
                component.Unquantized_FloatValue = snapshotBefore.Unquantized_FloatValue;
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                component.Unquantized_Interpolated_FloatValue = math.lerp(snapshotBefore.Unquantized_Interpolated_FloatValue,
                    snapshotAfter.Unquantized_Interpolated_FloatValue, snapshotInterpolationFactor);
                component.FloatValue = snapshotBefore.FloatValue * 0.1f;
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var Interpolated_FloatValue_Before = snapshotBefore.Interpolated_FloatValue * 0.1f;
                var Interpolated_FloatValue_After = snapshotAfter.Interpolated_FloatValue * 0.1f;
                component.Interpolated_FloatValue = math.lerp(Interpolated_FloatValue_Before, Interpolated_FloatValue_After, snapshotInterpolationFactor);
                component.Float2Value = new float2(snapshotBefore.Float2Value_x * 0.1f, snapshotBefore.Float2Value_y * 0.1f);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var Interpolated_Float2Value_Before = new float2(snapshotBefore.Interpolated_Float2Value_x * 0.1f, snapshotBefore.Interpolated_Float2Value_y * 0.1f);
                var Interpolated_Float2Value_After = new float2(snapshotAfter.Interpolated_Float2Value_x * 0.1f, snapshotAfter.Interpolated_Float2Value_y * 0.1f);
                component.Interpolated_Float2Value = math.lerp(Interpolated_Float2Value_Before, Interpolated_Float2Value_After, snapshotInterpolationFactor);
                component.Unquantized_Float2Value = new float2(snapshotBefore.Unquantized_Float2Value_x, snapshotBefore.Unquantized_Float2Value_y);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var Interpolated_Unquantized_Float2Value_Before = new float2(snapshotBefore.Interpolated_Unquantized_Float2Value_x, snapshotBefore.Interpolated_Unquantized_Float2Value_y);
                var Interpolated_Unquantized_Float2Value_After = new float2(snapshotAfter.Interpolated_Unquantized_Float2Value_x, snapshotAfter.Interpolated_Unquantized_Float2Value_y);
                component.Interpolated_Unquantized_Float2Value = math.lerp(Interpolated_Unquantized_Float2Value_Before, Interpolated_Unquantized_Float2Value_After, snapshotInterpolationFactor);
                component.Float3Value = new float3(snapshotBefore.Float3Value_x * 0.1f, snapshotBefore.Float3Value_y * 0.1f, snapshotBefore.Float3Value_z * 0.1f);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var Interpolated_Float3Value_Before = new float3(snapshotBefore.Interpolated_Float3Value_x * 0.1f, snapshotBefore.Interpolated_Float3Value_y * 0.1f, snapshotBefore.Interpolated_Float3Value_z * 0.1f);
                var Interpolated_Float3Value_After = new float3(snapshotAfter.Interpolated_Float3Value_x * 0.1f, snapshotAfter.Interpolated_Float3Value_y * 0.1f, snapshotAfter.Interpolated_Float3Value_z * 0.1f);
                component.Interpolated_Float3Value = math.lerp(Interpolated_Float3Value_Before, Interpolated_Float3Value_After, snapshotInterpolationFactor);
                component.Unquantized_Float3Value = new float3(snapshotBefore.Unquantized_Float3Value_x, snapshotBefore.Unquantized_Float3Value_y, snapshotBefore.Unquantized_Float3Value_z);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var Interpolated_Unquantized_Float3Value_Before = new float3(snapshotBefore.Interpolated_Unquantized_Float3Value_x, snapshotBefore.Interpolated_Unquantized_Float3Value_y, snapshotBefore.Interpolated_Unquantized_Float3Value_z);
                var Interpolated_Unquantized_Float3Value_After = new float3(snapshotAfter.Interpolated_Unquantized_Float3Value_x, snapshotAfter.Interpolated_Unquantized_Float3Value_y, snapshotAfter.Interpolated_Unquantized_Float3Value_z);
                component.Interpolated_Unquantized_Float3Value = math.lerp(Interpolated_Unquantized_Float3Value_Before, Interpolated_Unquantized_Float3Value_After, snapshotInterpolationFactor);
                component.Float4Value = new float4(snapshotBefore.Float4Value_x * 0.1f, snapshotBefore.Float4Value_y * 0.1f, snapshotBefore.Float4Value_z * 0.1f, snapshotBefore.Float4Value_w * 0.1f);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var Interpolated_Float4Value_Before = new float4(snapshotBefore.Interpolated_Float4Value_x * 0.1f, snapshotBefore.Interpolated_Float4Value_y * 0.1f, snapshotBefore.Interpolated_Float4Value_z * 0.1f, snapshotBefore.Interpolated_Float4Value_w * 0.1f);
                var Interpolated_Float4Value_After = new float4(snapshotAfter.Interpolated_Float4Value_x * 0.1f, snapshotAfter.Interpolated_Float4Value_y * 0.1f, snapshotAfter.Interpolated_Float4Value_z * 0.1f, snapshotAfter.Interpolated_Float4Value_w * 0.1f);
                component.Interpolated_Float4Value = math.lerp(Interpolated_Float4Value_Before, Interpolated_Float4Value_After, snapshotInterpolationFactor);
                component.Unquantized_Float4Value = new float4(snapshotBefore.Unquantized_Float4Value_x, snapshotBefore.Unquantized_Float4Value_y, snapshotBefore.Unquantized_Float4Value_z, snapshotBefore.Unquantized_Float4Value_w);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var Interpolated_Unquantized_Float4Value_Before = new float4(snapshotBefore.Interpolated_Unquantized_Float4Value_x, snapshotBefore.Interpolated_Unquantized_Float4Value_y, snapshotBefore.Interpolated_Unquantized_Float4Value_z, snapshotBefore.Interpolated_Unquantized_Float4Value_w);
                var Interpolated_Unquantized_Float4Value_After = new float4(snapshotAfter.Interpolated_Unquantized_Float4Value_x, snapshotAfter.Interpolated_Unquantized_Float4Value_y, snapshotAfter.Interpolated_Unquantized_Float4Value_z, snapshotAfter.Interpolated_Unquantized_Float4Value_w);
                component.Interpolated_Unquantized_Float4Value = math.lerp(Interpolated_Unquantized_Float4Value_Before, Interpolated_Unquantized_Float4Value_After, snapshotInterpolationFactor);
                component.QuaternionValue = math.normalize(new quaternion(snapshotBefore.QuaternionValueX * 0.001f, snapshotBefore.QuaternionValueY * 0.001f, snapshotBefore.QuaternionValueZ * 0.001f, snapshotBefore.QuaternionValueW * 0.001f));
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var Interpolated_QuaternionValue_Before = math.normalize(new quaternion(snapshotBefore.Interpolated_QuaternionValueX * 0.001f, snapshotBefore.Interpolated_QuaternionValueY * 0.001f, snapshotBefore.Interpolated_QuaternionValueZ * 0.001f, snapshotBefore.Interpolated_QuaternionValueW * 0.001f));
                var Interpolated_QuaternionValue_After = math.normalize(new quaternion(snapshotAfter.Interpolated_QuaternionValueX * 0.001f, snapshotAfter.Interpolated_QuaternionValueY * 0.001f, snapshotAfter.Interpolated_QuaternionValueZ * 0.001f, snapshotAfter.Interpolated_QuaternionValueW * 0.001f));
                component.Interpolated_QuaternionValue = math.slerp(Interpolated_QuaternionValue_Before,
                    Interpolated_QuaternionValue_After, snapshotInterpolationFactor);
                component.Unquantized_QuaternionValue = new quaternion(snapshotBefore.Unquantized_QuaternionValueX, snapshotBefore.Unquantized_QuaternionValueY, snapshotBefore.Unquantized_QuaternionValueZ, snapshotBefore.Unquantized_QuaternionValueW);
                snapshotInterpolationFactor = math.max(snapshotInterpolationFactorRaw, 0);
                var Interpolated_Unquantized_QuaternionValue_Before = new quaternion(snapshotBefore.Interpolated_Unquantized_QuaternionValueX, snapshotBefore.Interpolated_Unquantized_QuaternionValueY, snapshotBefore.Interpolated_Unquantized_QuaternionValueZ, snapshotBefore.Interpolated_Unquantized_QuaternionValueW);
                var Interpolated_Unquantized_QuaternionValue_After = new quaternion(snapshotAfter.Interpolated_Unquantized_QuaternionValueX, snapshotAfter.Interpolated_Unquantized_QuaternionValueY, snapshotAfter.Interpolated_Unquantized_QuaternionValueZ, snapshotAfter.Interpolated_Unquantized_QuaternionValueW);
                component.Interpolated_Unquantized_QuaternionValue = math.slerp(Interpolated_Unquantized_QuaternionValue_Before,
                    Interpolated_Unquantized_QuaternionValue_After, snapshotInterpolationFactor);
                component.String32Value = snapshotBefore.String32Value;
                component.String64Value = snapshotBefore.String64Value;
                component.String128Value = snapshotBefore.String128Value;
                component.String512Value = snapshotBefore.String512Value;
                component.String4096Value = snapshotBefore.String4096Value;
                component.EntityValue = Entity.Null;
                if (snapshotBefore.EntityValue != 0)
                {
                    if (deserializerState.GhostMap.TryGetValue(new SpawnedGhost{ghostId = snapshotBefore.EntityValue, spawnTick = snapshotBefore.EntityValueSpawnTick}, out var ghostEnt))
                        component.EntityValue = ghostEnt;
                }

            }
        }


        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.RestoreFromBackupDelegate))]
        private static void RestoreFromBackup(IntPtr componentData, IntPtr backupData)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypeFlat>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypeFlat>(backupData, 0);
            component.Composed_Int3.x = backup.Composed_Int3.x;
            component.Composed_Int3.y = backup.Composed_Int3.y;
            component.Composed_Int3.z = backup.Composed_Int3.z;
            component.Int3.x = backup.Int3.x;
            component.Int3.y = backup.Int3.y;
            component.Int3.z = backup.Int3.z;
            component.Composed_UInt3.x = backup.Composed_UInt3.x;
            component.Composed_UInt3.y = backup.Composed_UInt3.y;
            component.Composed_UInt3.z = backup.Composed_UInt3.z;
            component.UInt3.x = backup.UInt3.x;
            component.UInt3.y = backup.UInt3.y;
            component.UInt3.z = backup.UInt3.z;
            component.ComposedPartial_UInt3.x = backup.ComposedPartial_UInt3.x;
            component.ComposedPartial_UInt3.y = backup.ComposedPartial_UInt3.y;
            component.Partial_UInt3.x = backup.Partial_UInt3.x;
            component.Partial_UInt3.y = backup.Partial_UInt3.y;
            component.Composed_FloatX.x.x = backup.Composed_FloatX.x.x;
            component.Composed_FloatX.x.y = backup.Composed_FloatX.x.y;
            component.Composed_FloatX.y.x = backup.Composed_FloatX.y.x;
            component.Composed_FloatX.y.y = backup.Composed_FloatX.y.y;
            component.Composed_FloatX.y.z = backup.Composed_FloatX.y.z;
            component.Composed_FloatX.z.x = backup.Composed_FloatX.z.x;
            component.Composed_FloatX.z.y = backup.Composed_FloatX.z.y;
            component.Composed_FloatX.z.z = backup.Composed_FloatX.z.z;
            component.Composed_FloatX.z.w = backup.Composed_FloatX.z.w;
            component.FloatX.x.x = backup.FloatX.x.x;
            component.FloatX.x.y = backup.FloatX.x.y;
            component.FloatX.y.x = backup.FloatX.y.x;
            component.FloatX.y.y = backup.FloatX.y.y;
            component.FloatX.y.z = backup.FloatX.y.z;
            component.FloatX.z.x = backup.FloatX.z.x;
            component.FloatX.z.y = backup.FloatX.z.y;
            component.FloatX.z.z = backup.FloatX.z.z;
            component.FloatX.z.w = backup.FloatX.z.w;
            component.IntValue = backup.IntValue;
            component.UIntValue = backup.UIntValue;
            component.BoolValue = backup.BoolValue;
            component.Unquantized_FloatValue = backup.Unquantized_FloatValue;
            component.Unquantized_Interpolated_FloatValue = backup.Unquantized_Interpolated_FloatValue;
            component.FloatValue = backup.FloatValue;
            component.Interpolated_FloatValue = backup.Interpolated_FloatValue;
            component.Float2Value.x = backup.Float2Value.x;
            component.Float2Value.y = backup.Float2Value.y;
            component.Interpolated_Float2Value.x = backup.Interpolated_Float2Value.x;
            component.Interpolated_Float2Value.y = backup.Interpolated_Float2Value.y;
            component.Unquantized_Float2Value.x = backup.Unquantized_Float2Value.x;
            component.Unquantized_Float2Value.y = backup.Unquantized_Float2Value.y;
            component.Interpolated_Unquantized_Float2Value.x = backup.Interpolated_Unquantized_Float2Value.x;
            component.Interpolated_Unquantized_Float2Value.y = backup.Interpolated_Unquantized_Float2Value.y;
            component.Float3Value.x = backup.Float3Value.x;
            component.Float3Value.y = backup.Float3Value.y;
            component.Float3Value.z = backup.Float3Value.z;
            component.Interpolated_Float3Value.x = backup.Interpolated_Float3Value.x;
            component.Interpolated_Float3Value.y = backup.Interpolated_Float3Value.y;
            component.Interpolated_Float3Value.z = backup.Interpolated_Float3Value.z;
            component.Unquantized_Float3Value.x = backup.Unquantized_Float3Value.x;
            component.Unquantized_Float3Value.y = backup.Unquantized_Float3Value.y;
            component.Unquantized_Float3Value.z = backup.Unquantized_Float3Value.z;
            component.Interpolated_Unquantized_Float3Value.x = backup.Interpolated_Unquantized_Float3Value.x;
            component.Interpolated_Unquantized_Float3Value.y = backup.Interpolated_Unquantized_Float3Value.y;
            component.Interpolated_Unquantized_Float3Value.z = backup.Interpolated_Unquantized_Float3Value.z;
            component.Float4Value.x = backup.Float4Value.x;
            component.Float4Value.y = backup.Float4Value.y;
            component.Float4Value.z = backup.Float4Value.z;
            component.Float4Value.w = backup.Float4Value.w;
            component.Interpolated_Float4Value.x = backup.Interpolated_Float4Value.x;
            component.Interpolated_Float4Value.y = backup.Interpolated_Float4Value.y;
            component.Interpolated_Float4Value.z = backup.Interpolated_Float4Value.z;
            component.Interpolated_Float4Value.w = backup.Interpolated_Float4Value.w;
            component.Unquantized_Float4Value.x = backup.Unquantized_Float4Value.x;
            component.Unquantized_Float4Value.y = backup.Unquantized_Float4Value.y;
            component.Unquantized_Float4Value.z = backup.Unquantized_Float4Value.z;
            component.Unquantized_Float4Value.w = backup.Unquantized_Float4Value.w;
            component.Interpolated_Unquantized_Float4Value.x = backup.Interpolated_Unquantized_Float4Value.x;
            component.Interpolated_Unquantized_Float4Value.y = backup.Interpolated_Unquantized_Float4Value.y;
            component.Interpolated_Unquantized_Float4Value.z = backup.Interpolated_Unquantized_Float4Value.z;
            component.Interpolated_Unquantized_Float4Value.w = backup.Interpolated_Unquantized_Float4Value.w;
            component.QuaternionValue = backup.QuaternionValue;
            component.Interpolated_QuaternionValue = backup.Interpolated_QuaternionValue;
            component.Unquantized_QuaternionValue = backup.Unquantized_QuaternionValue;
            component.Interpolated_Unquantized_QuaternionValue = backup.Interpolated_Unquantized_QuaternionValue;
            component.String32Value = backup.String32Value;
            component.String64Value = backup.String64Value;
            component.String128Value = backup.String128Value;
            component.String512Value = backup.String512Value;
            component.String4096Value = backup.String4096Value;
            component.EntityValue = backup.EntityValue;
        }

        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.PredictDeltaDelegate))]
        private static void PredictDelta(IntPtr snapshotData, IntPtr baseline1Data, IntPtr baseline2Data, ref GhostDeltaPredictor predictor)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline1 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline1Data);
            ref var baseline2 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline2Data);
            snapshot.Composed_Int3_x = predictor.PredictInt(snapshot.Composed_Int3_x, baseline1.Composed_Int3_x, baseline2.Composed_Int3_x);
            snapshot.Composed_Int3_y = predictor.PredictInt(snapshot.Composed_Int3_y, baseline1.Composed_Int3_y, baseline2.Composed_Int3_y);
            snapshot.Composed_Int3_z = predictor.PredictInt(snapshot.Composed_Int3_z, baseline1.Composed_Int3_z, baseline2.Composed_Int3_z);
            snapshot.Int3_x = predictor.PredictInt(snapshot.Int3_x, baseline1.Int3_x, baseline2.Int3_x);
            snapshot.Int3_y = predictor.PredictInt(snapshot.Int3_y, baseline1.Int3_y, baseline2.Int3_y);
            snapshot.Int3_z = predictor.PredictInt(snapshot.Int3_z, baseline1.Int3_z, baseline2.Int3_z);
            snapshot.Composed_UInt3_x = (uint)predictor.PredictInt((int)snapshot.Composed_UInt3_x, (int)baseline1.Composed_UInt3_x, (int)baseline2.Composed_UInt3_x);
            snapshot.Composed_UInt3_y = (uint)predictor.PredictInt((int)snapshot.Composed_UInt3_y, (int)baseline1.Composed_UInt3_y, (int)baseline2.Composed_UInt3_y);
            snapshot.Composed_UInt3_z = (uint)predictor.PredictInt((int)snapshot.Composed_UInt3_z, (int)baseline1.Composed_UInt3_z, (int)baseline2.Composed_UInt3_z);
            snapshot.UInt3_x = (uint)predictor.PredictInt((int)snapshot.UInt3_x, (int)baseline1.UInt3_x, (int)baseline2.UInt3_x);
            snapshot.UInt3_y = (uint)predictor.PredictInt((int)snapshot.UInt3_y, (int)baseline1.UInt3_y, (int)baseline2.UInt3_y);
            snapshot.UInt3_z = (uint)predictor.PredictInt((int)snapshot.UInt3_z, (int)baseline1.UInt3_z, (int)baseline2.UInt3_z);
            snapshot.ComposedPartial_UInt3_x = (uint)predictor.PredictInt((int)snapshot.ComposedPartial_UInt3_x, (int)baseline1.ComposedPartial_UInt3_x, (int)baseline2.ComposedPartial_UInt3_x);
            snapshot.ComposedPartial_UInt3_y = (uint)predictor.PredictInt((int)snapshot.ComposedPartial_UInt3_y, (int)baseline1.ComposedPartial_UInt3_y, (int)baseline2.ComposedPartial_UInt3_y);
            snapshot.Partial_UInt3_x = (uint)predictor.PredictInt((int)snapshot.Partial_UInt3_x, (int)baseline1.Partial_UInt3_x, (int)baseline2.Partial_UInt3_x);
            snapshot.Partial_UInt3_y = (uint)predictor.PredictInt((int)snapshot.Partial_UInt3_y, (int)baseline1.Partial_UInt3_y, (int)baseline2.Partial_UInt3_y);
            snapshot.Composed_FloatX_x_x = predictor.PredictInt(snapshot.Composed_FloatX_x_x, baseline1.Composed_FloatX_x_x, baseline2.Composed_FloatX_x_x);
            snapshot.Composed_FloatX_x_y = predictor.PredictInt(snapshot.Composed_FloatX_x_y, baseline1.Composed_FloatX_x_y, baseline2.Composed_FloatX_x_y);
            snapshot.Composed_FloatX_y_x = predictor.PredictInt(snapshot.Composed_FloatX_y_x, baseline1.Composed_FloatX_y_x, baseline2.Composed_FloatX_y_x);
            snapshot.Composed_FloatX_y_y = predictor.PredictInt(snapshot.Composed_FloatX_y_y, baseline1.Composed_FloatX_y_y, baseline2.Composed_FloatX_y_y);
            snapshot.Composed_FloatX_y_z = predictor.PredictInt(snapshot.Composed_FloatX_y_z, baseline1.Composed_FloatX_y_z, baseline2.Composed_FloatX_y_z);
            snapshot.Composed_FloatX_z_x = predictor.PredictInt(snapshot.Composed_FloatX_z_x, baseline1.Composed_FloatX_z_x, baseline2.Composed_FloatX_z_x);
            snapshot.Composed_FloatX_z_y = predictor.PredictInt(snapshot.Composed_FloatX_z_y, baseline1.Composed_FloatX_z_y, baseline2.Composed_FloatX_z_y);
            snapshot.Composed_FloatX_z_z = predictor.PredictInt(snapshot.Composed_FloatX_z_z, baseline1.Composed_FloatX_z_z, baseline2.Composed_FloatX_z_z);
            snapshot.Composed_FloatX_z_w = predictor.PredictInt(snapshot.Composed_FloatX_z_w, baseline1.Composed_FloatX_z_w, baseline2.Composed_FloatX_z_w);
            snapshot.FloatX_x_x = predictor.PredictInt(snapshot.FloatX_x_x, baseline1.FloatX_x_x, baseline2.FloatX_x_x);
            snapshot.FloatX_x_y = predictor.PredictInt(snapshot.FloatX_x_y, baseline1.FloatX_x_y, baseline2.FloatX_x_y);
            snapshot.FloatX_y_x = predictor.PredictInt(snapshot.FloatX_y_x, baseline1.FloatX_y_x, baseline2.FloatX_y_x);
            snapshot.FloatX_y_y = predictor.PredictInt(snapshot.FloatX_y_y, baseline1.FloatX_y_y, baseline2.FloatX_y_y);
            snapshot.FloatX_y_z = predictor.PredictInt(snapshot.FloatX_y_z, baseline1.FloatX_y_z, baseline2.FloatX_y_z);
            snapshot.FloatX_z_x = predictor.PredictInt(snapshot.FloatX_z_x, baseline1.FloatX_z_x, baseline2.FloatX_z_x);
            snapshot.FloatX_z_y = predictor.PredictInt(snapshot.FloatX_z_y, baseline1.FloatX_z_y, baseline2.FloatX_z_y);
            snapshot.FloatX_z_z = predictor.PredictInt(snapshot.FloatX_z_z, baseline1.FloatX_z_z, baseline2.FloatX_z_z);
            snapshot.FloatX_z_w = predictor.PredictInt(snapshot.FloatX_z_w, baseline1.FloatX_z_w, baseline2.FloatX_z_w);
            snapshot.IntValue = predictor.PredictInt(snapshot.IntValue, baseline1.IntValue, baseline2.IntValue);
            snapshot.UIntValue = (uint)predictor.PredictInt((int)snapshot.UIntValue, (int)baseline1.UIntValue, (int)baseline2.UIntValue);
            snapshot.BoolValue = (uint)predictor.PredictInt((int)snapshot.BoolValue, (int)baseline1.BoolValue, (int)baseline2.BoolValue);
            snapshot.FloatValue = predictor.PredictInt(snapshot.FloatValue, baseline1.FloatValue, baseline2.FloatValue);
            snapshot.Interpolated_FloatValue = predictor.PredictInt(snapshot.Interpolated_FloatValue, baseline1.Interpolated_FloatValue, baseline2.Interpolated_FloatValue);
            snapshot.Float2Value_x = predictor.PredictInt(snapshot.Float2Value_x, baseline1.Float2Value_x, baseline2.Float2Value_x);
            snapshot.Float2Value_y = predictor.PredictInt(snapshot.Float2Value_y, baseline1.Float2Value_y, baseline2.Float2Value_y);
            snapshot.Interpolated_Float2Value_x = predictor.PredictInt(snapshot.Interpolated_Float2Value_x, baseline1.Interpolated_Float2Value_x, baseline2.Interpolated_Float2Value_x);
            snapshot.Interpolated_Float2Value_y = predictor.PredictInt(snapshot.Interpolated_Float2Value_y, baseline1.Interpolated_Float2Value_y, baseline2.Interpolated_Float2Value_y);
            snapshot.Float3Value_x = predictor.PredictInt(snapshot.Float3Value_x, baseline1.Float3Value_x, baseline2.Float3Value_x);
            snapshot.Float3Value_y = predictor.PredictInt(snapshot.Float3Value_y, baseline1.Float3Value_y, baseline2.Float3Value_y);
            snapshot.Float3Value_z = predictor.PredictInt(snapshot.Float3Value_z, baseline1.Float3Value_z, baseline2.Float3Value_z);
            snapshot.Interpolated_Float3Value_x = predictor.PredictInt(snapshot.Interpolated_Float3Value_x, baseline1.Interpolated_Float3Value_x, baseline2.Interpolated_Float3Value_x);
            snapshot.Interpolated_Float3Value_y = predictor.PredictInt(snapshot.Interpolated_Float3Value_y, baseline1.Interpolated_Float3Value_y, baseline2.Interpolated_Float3Value_y);
            snapshot.Interpolated_Float3Value_z = predictor.PredictInt(snapshot.Interpolated_Float3Value_z, baseline1.Interpolated_Float3Value_z, baseline2.Interpolated_Float3Value_z);
            snapshot.Float4Value_x = predictor.PredictInt(snapshot.Float4Value_x, baseline1.Float4Value_x, baseline2.Float4Value_x);
            snapshot.Float4Value_y = predictor.PredictInt(snapshot.Float4Value_y, baseline1.Float4Value_y, baseline2.Float4Value_y);
            snapshot.Float4Value_z = predictor.PredictInt(snapshot.Float4Value_z, baseline1.Float4Value_z, baseline2.Float4Value_z);
            snapshot.Float4Value_w = predictor.PredictInt(snapshot.Float4Value_w, baseline1.Float4Value_w, baseline2.Float4Value_w);
            snapshot.Interpolated_Float4Value_x = predictor.PredictInt(snapshot.Interpolated_Float4Value_x, baseline1.Interpolated_Float4Value_x, baseline2.Interpolated_Float4Value_x);
            snapshot.Interpolated_Float4Value_y = predictor.PredictInt(snapshot.Interpolated_Float4Value_y, baseline1.Interpolated_Float4Value_y, baseline2.Interpolated_Float4Value_y);
            snapshot.Interpolated_Float4Value_z = predictor.PredictInt(snapshot.Interpolated_Float4Value_z, baseline1.Interpolated_Float4Value_z, baseline2.Interpolated_Float4Value_z);
            snapshot.Interpolated_Float4Value_w = predictor.PredictInt(snapshot.Interpolated_Float4Value_w, baseline1.Interpolated_Float4Value_w, baseline2.Interpolated_Float4Value_w);
            snapshot.QuaternionValueX = predictor.PredictInt(snapshot.QuaternionValueX, baseline1.QuaternionValueX, baseline2.QuaternionValueX);
            snapshot.QuaternionValueY = predictor.PredictInt(snapshot.QuaternionValueY, baseline1.QuaternionValueY, baseline2.QuaternionValueY);
            snapshot.QuaternionValueZ = predictor.PredictInt(snapshot.QuaternionValueZ, baseline1.QuaternionValueZ, baseline2.QuaternionValueZ);
            snapshot.QuaternionValueW = predictor.PredictInt(snapshot.QuaternionValueW, baseline1.QuaternionValueW, baseline2.QuaternionValueW);
            snapshot.Interpolated_QuaternionValueX = predictor.PredictInt(snapshot.Interpolated_QuaternionValueX, baseline1.Interpolated_QuaternionValueX, baseline2.Interpolated_QuaternionValueX);
            snapshot.Interpolated_QuaternionValueY = predictor.PredictInt(snapshot.Interpolated_QuaternionValueY, baseline1.Interpolated_QuaternionValueY, baseline2.Interpolated_QuaternionValueY);
            snapshot.Interpolated_QuaternionValueZ = predictor.PredictInt(snapshot.Interpolated_QuaternionValueZ, baseline1.Interpolated_QuaternionValueZ, baseline2.Interpolated_QuaternionValueZ);
            snapshot.Interpolated_QuaternionValueW = predictor.PredictInt(snapshot.Interpolated_QuaternionValueW, baseline1.Interpolated_QuaternionValueW, baseline2.Interpolated_QuaternionValueW);
            snapshot.EntityValue = predictor.PredictInt(snapshot.EntityValue, baseline1.EntityValue, baseline2.EntityValue);
            snapshot.EntityValueSpawnTick = (uint)predictor.PredictInt((int)snapshot.EntityValueSpawnTick, (int)baseline1.EntityValueSpawnTick, (int)baseline2.EntityValue);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CalculateChangeMaskDelegate))]
        private static void CalculateChangeMask(IntPtr snapshotData, IntPtr baselineData, IntPtr bits, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask;
            changeMask = (snapshot.Composed_Int3_x != baseline.Composed_Int3_x) ? 1u : 0;
            changeMask |= (snapshot.Composed_Int3_y != baseline.Composed_Int3_y) ? (1u<<0) : 0;
            changeMask |= (snapshot.Composed_Int3_z != baseline.Composed_Int3_z) ? (1u<<0) : 0;
            changeMask |= (snapshot.Int3_x != baseline.Int3_x) ? (1u<<1) : 0;
            changeMask |= (snapshot.Int3_y != baseline.Int3_y) ? (1u<<2) : 0;
            changeMask |= (snapshot.Int3_z != baseline.Int3_z) ? (1u<<3) : 0;
            changeMask |= (snapshot.Composed_UInt3_x != baseline.Composed_UInt3_x) ? (1u<<4) : 0;
            changeMask |= (snapshot.Composed_UInt3_y != baseline.Composed_UInt3_y) ? (1u<<4) : 0;
            changeMask |= (snapshot.Composed_UInt3_z != baseline.Composed_UInt3_z) ? (1u<<4) : 0;
            changeMask |= (snapshot.UInt3_x != baseline.UInt3_x) ? (1u<<5) : 0;
            changeMask |= (snapshot.UInt3_y != baseline.UInt3_y) ? (1u<<6) : 0;
            changeMask |= (snapshot.UInt3_z != baseline.UInt3_z) ? (1u<<7) : 0;
            changeMask |= (snapshot.ComposedPartial_UInt3_x != baseline.ComposedPartial_UInt3_x) ? (1u<<8) : 0;
            changeMask |= (snapshot.ComposedPartial_UInt3_y != baseline.ComposedPartial_UInt3_y) ? (1u<<8) : 0;
            changeMask |= (snapshot.Partial_UInt3_x != baseline.Partial_UInt3_x) ? (1u<<9) : 0;
            changeMask |= (snapshot.Partial_UInt3_y != baseline.Partial_UInt3_y) ? (1u<<10) : 0;
            changeMask |= (snapshot.Composed_FloatX_x_x != baseline.Composed_FloatX_x_x) ? (1u<<11) : 0;
            changeMask |= (snapshot.Composed_FloatX_x_y != baseline.Composed_FloatX_x_y) ? (1u<<11) : 0;
            changeMask |= (snapshot.Composed_FloatX_y_x != baseline.Composed_FloatX_y_x) ? (1u<<12) : 0;
            changeMask |= (snapshot.Composed_FloatX_y_y != baseline.Composed_FloatX_y_y) ? (1u<<12) : 0;
            changeMask |= (snapshot.Composed_FloatX_y_z != baseline.Composed_FloatX_y_z) ? (1u<<12) : 0;
            changeMask |= (snapshot.Composed_FloatX_z_x != baseline.Composed_FloatX_z_x) ? (1u<<13) : 0;
            changeMask |= (snapshot.Composed_FloatX_z_y != baseline.Composed_FloatX_z_y) ? (1u<<13) : 0;
            changeMask |= (snapshot.Composed_FloatX_z_z != baseline.Composed_FloatX_z_z) ? (1u<<13) : 0;
            changeMask |= (snapshot.Composed_FloatX_z_w != baseline.Composed_FloatX_z_w) ? (1u<<13) : 0;
            changeMask |= (snapshot.FloatX_x_x != baseline.FloatX_x_x) ? (1u<<15) : 0;
            changeMask |= (snapshot.FloatX_x_y != baseline.FloatX_x_y) ? (1u<<15) : 0;
            changeMask |= (snapshot.FloatX_y_x != baseline.FloatX_y_x) ? (1u<<16) : 0;
            changeMask |= (snapshot.FloatX_y_y != baseline.FloatX_y_y) ? (1u<<16) : 0;
            changeMask |= (snapshot.FloatX_y_z != baseline.FloatX_y_z) ? (1u<<16) : 0;
            changeMask |= (snapshot.FloatX_z_x != baseline.FloatX_z_x) ? (1u<<17) : 0;
            changeMask |= (snapshot.FloatX_z_y != baseline.FloatX_z_y) ? (1u<<17) : 0;
            changeMask |= (snapshot.FloatX_z_z != baseline.FloatX_z_z) ? (1u<<17) : 0;
            changeMask |= (snapshot.FloatX_z_w != baseline.FloatX_z_w) ? (1u<<17) : 0;
            changeMask |= (snapshot.IntValue != baseline.IntValue) ? (1u<<18) : 0;
            changeMask |= (snapshot.UIntValue != baseline.UIntValue) ? (1u<<19) : 0;
            changeMask |= (snapshot.BoolValue != baseline.BoolValue) ? (1u<<20) : 0;
            changeMask |= (snapshot.Unquantized_FloatValue != baseline.Unquantized_FloatValue) ? (1u<<21) : 0;
            changeMask |= (snapshot.Unquantized_Interpolated_FloatValue != baseline.Unquantized_Interpolated_FloatValue) ? (1u<<22) : 0;
            changeMask |= (snapshot.FloatValue != baseline.FloatValue) ? (1u<<23) : 0;
            changeMask |= (snapshot.Interpolated_FloatValue != baseline.Interpolated_FloatValue) ? (1u<<24) : 0;
            changeMask |= (snapshot.Float2Value_x != baseline.Float2Value_x) ? (1u<<25) : 0;
            changeMask |= (snapshot.Float2Value_y != baseline.Float2Value_y) ? (1u<<25) : 0;
            changeMask |= (snapshot.Interpolated_Float2Value_x != baseline.Interpolated_Float2Value_x) ? (1u<<26) : 0;
            changeMask |= (snapshot.Interpolated_Float2Value_y != baseline.Interpolated_Float2Value_y) ? (1u<<26) : 0;
            changeMask |= (snapshot.Unquantized_Float2Value_x != baseline.Unquantized_Float2Value_x) ? (1u<<27) : 0;
            changeMask |= (snapshot.Unquantized_Float2Value_y != baseline.Unquantized_Float2Value_y) ? (1u<<27) : 0;
            changeMask |= (snapshot.Interpolated_Unquantized_Float2Value_x != baseline.Interpolated_Unquantized_Float2Value_x) ? (1u<<28) : 0;
            changeMask |= (snapshot.Interpolated_Unquantized_Float2Value_y != baseline.Interpolated_Unquantized_Float2Value_y) ? (1u<<28) : 0;
            changeMask |= (snapshot.Float3Value_x != baseline.Float3Value_x) ? (1u<<29) : 0;
            changeMask |= (snapshot.Float3Value_y != baseline.Float3Value_y) ? (1u<<29) : 0;
            changeMask |= (snapshot.Float3Value_z != baseline.Float3Value_z) ? (1u<<29) : 0;
            changeMask |= (snapshot.Interpolated_Float3Value_x != baseline.Interpolated_Float3Value_x) ? (1u<<30) : 0;
            changeMask |= (snapshot.Interpolated_Float3Value_y != baseline.Interpolated_Float3Value_y) ? (1u<<30) : 0;
            changeMask |= (snapshot.Interpolated_Float3Value_z != baseline.Interpolated_Float3Value_z) ? (1u<<30) : 0;
            changeMask |= (snapshot.Unquantized_Float3Value_x != baseline.Unquantized_Float3Value_x) ? (1u<<31) : 0;
            changeMask |= (snapshot.Unquantized_Float3Value_y != baseline.Unquantized_Float3Value_y) ? (1u<<31) : 0;
            changeMask |= (snapshot.Unquantized_Float3Value_z != baseline.Unquantized_Float3Value_z) ? (1u<<31) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 32);
            startOffset += 32;
            changeMask = (snapshot.Interpolated_Unquantized_Float3Value_x != baseline.Interpolated_Unquantized_Float3Value_x) ? 1u : 0;
            changeMask |= (snapshot.Interpolated_Unquantized_Float3Value_y != baseline.Interpolated_Unquantized_Float3Value_y) ? (1u<<0) : 0;
            changeMask |= (snapshot.Interpolated_Unquantized_Float3Value_z != baseline.Interpolated_Unquantized_Float3Value_z) ? (1u<<0) : 0;
            changeMask |= (snapshot.Float4Value_x != baseline.Float4Value_x) ? (1u<<1) : 0;
            changeMask |= (snapshot.Float4Value_y != baseline.Float4Value_y) ? (1u<<1) : 0;
            changeMask |= (snapshot.Float4Value_z != baseline.Float4Value_z) ? (1u<<1) : 0;
            changeMask |= (snapshot.Float4Value_w != baseline.Float4Value_w) ? (1u<<1) : 0;
            changeMask |= (snapshot.Interpolated_Float4Value_x != baseline.Interpolated_Float4Value_x) ? (1u<<2) : 0;
            changeMask |= (snapshot.Interpolated_Float4Value_y != baseline.Interpolated_Float4Value_y) ? (1u<<2) : 0;
            changeMask |= (snapshot.Interpolated_Float4Value_z != baseline.Interpolated_Float4Value_z) ? (1u<<2) : 0;
            changeMask |= (snapshot.Interpolated_Float4Value_w != baseline.Interpolated_Float4Value_w) ? (1u<<2) : 0;
            changeMask |= (snapshot.Unquantized_Float4Value_x != baseline.Unquantized_Float4Value_x) ? (1u<<3) : 0;
            changeMask |= (snapshot.Unquantized_Float4Value_y != baseline.Unquantized_Float4Value_y) ? (1u<<3) : 0;
            changeMask |= (snapshot.Unquantized_Float4Value_z != baseline.Unquantized_Float4Value_z) ? (1u<<3) : 0;
            changeMask |= (snapshot.Unquantized_Float4Value_w != baseline.Unquantized_Float4Value_w) ? (1u<<3) : 0;
            changeMask |= (snapshot.Interpolated_Unquantized_Float4Value_x != baseline.Interpolated_Unquantized_Float4Value_x) ? (1u<<4) : 0;
            changeMask |= (snapshot.Interpolated_Unquantized_Float4Value_y != baseline.Interpolated_Unquantized_Float4Value_y) ? (1u<<4) : 0;
            changeMask |= (snapshot.Interpolated_Unquantized_Float4Value_z != baseline.Interpolated_Unquantized_Float4Value_z) ? (1u<<4) : 0;
            changeMask |= (snapshot.Interpolated_Unquantized_Float4Value_w != baseline.Interpolated_Unquantized_Float4Value_w) ? (1u<<4) : 0;
            changeMask |= (snapshot.QuaternionValueX != baseline.QuaternionValueX ||
                        snapshot.QuaternionValueY != baseline.QuaternionValueY ||
                        snapshot.QuaternionValueZ != baseline.QuaternionValueZ ||
                        snapshot.QuaternionValueW != baseline.QuaternionValueW) ? (1u<<5) : 0;
            changeMask |= (snapshot.Interpolated_QuaternionValueX != baseline.Interpolated_QuaternionValueX ||
                        snapshot.Interpolated_QuaternionValueY != baseline.Interpolated_QuaternionValueY ||
                        snapshot.Interpolated_QuaternionValueZ != baseline.Interpolated_QuaternionValueZ ||
                        snapshot.Interpolated_QuaternionValueW != baseline.Interpolated_QuaternionValueW) ? (1u<<6) : 0;
            changeMask |= (snapshot.Unquantized_QuaternionValueX != baseline.Unquantized_QuaternionValueX ||
                        snapshot.Unquantized_QuaternionValueY != baseline.Unquantized_QuaternionValueY ||
                        snapshot.Unquantized_QuaternionValueZ != baseline.Unquantized_QuaternionValueZ ||
                        snapshot.Unquantized_QuaternionValueW != baseline.Unquantized_QuaternionValueW) ? (1u<<7) : 0;
            changeMask |= (snapshot.Interpolated_Unquantized_QuaternionValueX != baseline.Interpolated_Unquantized_QuaternionValueX ||
                        snapshot.Interpolated_Unquantized_QuaternionValueY != baseline.Interpolated_Unquantized_QuaternionValueY ||
                        snapshot.Interpolated_Unquantized_QuaternionValueZ != baseline.Interpolated_Unquantized_QuaternionValueZ ||
                        snapshot.Interpolated_Unquantized_QuaternionValueW != baseline.Interpolated_Unquantized_QuaternionValueW) ? (1u<<8) : 0;
            changeMask |= snapshot.String32Value.Equals(baseline.String32Value) ? 0 : (1u<<9);
            changeMask |= snapshot.String64Value.Equals(baseline.String64Value) ? 0 : (1u<<10);
            changeMask |= snapshot.String128Value.Equals(baseline.String128Value) ? 0 : (1u<<11);
            changeMask |= snapshot.String512Value.Equals(baseline.String512Value) ? 0 : (1u<<12);
            changeMask |= snapshot.String4096Value.Equals(baseline.String4096Value) ? 0 : (1u<<13);
            changeMask |= (snapshot.EntityValue != baseline.EntityValue || snapshot.EntityValueSpawnTick != baseline.EntityValueSpawnTick) ? (1u<<14) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 15);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.SerializeDelegate))]
        private static void Serialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamWriter writer, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_Int3_x, baseline.Composed_Int3_x, compressionModel);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_Int3_y, baseline.Composed_Int3_y, compressionModel);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_Int3_z, baseline.Composed_Int3_z, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.Int3_x, baseline.Int3_x, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedIntDelta(snapshot.Int3_y, baseline.Int3_y, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedIntDelta(snapshot.Int3_z, baseline.Int3_z, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedUIntDelta(snapshot.Composed_UInt3_x, baseline.Composed_UInt3_x, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedUIntDelta(snapshot.Composed_UInt3_y, baseline.Composed_UInt3_y, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedUIntDelta(snapshot.Composed_UInt3_z, baseline.Composed_UInt3_z, compressionModel);
            if ((changeMask & (1 << 5)) != 0)
                writer.WritePackedUIntDelta(snapshot.UInt3_x, baseline.UInt3_x, compressionModel);
            if ((changeMask & (1 << 6)) != 0)
                writer.WritePackedUIntDelta(snapshot.UInt3_y, baseline.UInt3_y, compressionModel);
            if ((changeMask & (1 << 7)) != 0)
                writer.WritePackedUIntDelta(snapshot.UInt3_z, baseline.UInt3_z, compressionModel);
            if ((changeMask & (1 << 8)) != 0)
                writer.WritePackedUIntDelta(snapshot.ComposedPartial_UInt3_x, baseline.ComposedPartial_UInt3_x, compressionModel);
            if ((changeMask & (1 << 8)) != 0)
                writer.WritePackedUIntDelta(snapshot.ComposedPartial_UInt3_y, baseline.ComposedPartial_UInt3_y, compressionModel);
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedUIntDelta(snapshot.Partial_UInt3_x, baseline.Partial_UInt3_x, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedUIntDelta(snapshot.Partial_UInt3_y, baseline.Partial_UInt3_y, compressionModel);
            if ((changeMask & (1 << 11)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_FloatX_x_x, baseline.Composed_FloatX_x_x, compressionModel);
            if ((changeMask & (1 << 11)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_FloatX_x_y, baseline.Composed_FloatX_x_y, compressionModel);
            if ((changeMask & (1 << 12)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_FloatX_y_x, baseline.Composed_FloatX_y_x, compressionModel);
            if ((changeMask & (1 << 12)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_FloatX_y_y, baseline.Composed_FloatX_y_y, compressionModel);
            if ((changeMask & (1 << 12)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_FloatX_y_z, baseline.Composed_FloatX_y_z, compressionModel);
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_FloatX_z_x, baseline.Composed_FloatX_z_x, compressionModel);
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_FloatX_z_y, baseline.Composed_FloatX_z_y, compressionModel);
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_FloatX_z_z, baseline.Composed_FloatX_z_z, compressionModel);
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedIntDelta(snapshot.Composed_FloatX_z_w, baseline.Composed_FloatX_z_w, compressionModel);
            if ((changeMask & (1 << 15)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatX_x_x, baseline.FloatX_x_x, compressionModel);
            if ((changeMask & (1 << 15)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatX_x_y, baseline.FloatX_x_y, compressionModel);
            if ((changeMask & (1 << 16)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatX_y_x, baseline.FloatX_y_x, compressionModel);
            if ((changeMask & (1 << 16)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatX_y_y, baseline.FloatX_y_y, compressionModel);
            if ((changeMask & (1 << 16)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatX_y_z, baseline.FloatX_y_z, compressionModel);
            if ((changeMask & (1 << 17)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatX_z_x, baseline.FloatX_z_x, compressionModel);
            if ((changeMask & (1 << 17)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatX_z_y, baseline.FloatX_z_y, compressionModel);
            if ((changeMask & (1 << 17)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatX_z_z, baseline.FloatX_z_z, compressionModel);
            if ((changeMask & (1 << 17)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatX_z_w, baseline.FloatX_z_w, compressionModel);
            if ((changeMask & (1 << 18)) != 0)
                writer.WritePackedIntDelta(snapshot.IntValue, baseline.IntValue, compressionModel);
            if ((changeMask & (1 << 19)) != 0)
                writer.WritePackedUIntDelta(snapshot.UIntValue, baseline.UIntValue, compressionModel);
            if ((changeMask & (1 << 20)) != 0)
                writer.WritePackedUIntDelta(snapshot.BoolValue, baseline.BoolValue, compressionModel);
            if ((changeMask & (1 << 21)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_FloatValue, baseline.Unquantized_FloatValue, compressionModel);
            if ((changeMask & (1 << 22)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Interpolated_FloatValue, baseline.Unquantized_Interpolated_FloatValue, compressionModel);
            if ((changeMask & (1 << 23)) != 0)
                writer.WritePackedIntDelta(snapshot.FloatValue, baseline.FloatValue, compressionModel);
            if ((changeMask & (1 << 24)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_FloatValue, baseline.Interpolated_FloatValue, compressionModel);
            if ((changeMask & (1 << 25)) != 0)
                writer.WritePackedIntDelta(snapshot.Float2Value_x, baseline.Float2Value_x, compressionModel);
            if ((changeMask & (1 << 25)) != 0)
                writer.WritePackedIntDelta(snapshot.Float2Value_y, baseline.Float2Value_y, compressionModel);
            if ((changeMask & (1 << 26)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_Float2Value_x, baseline.Interpolated_Float2Value_x, compressionModel);
            if ((changeMask & (1 << 26)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_Float2Value_y, baseline.Interpolated_Float2Value_y, compressionModel);
            if ((changeMask & (1 << 27)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Float2Value_x, baseline.Unquantized_Float2Value_x, compressionModel);
            if ((changeMask & (1 << 27)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Float2Value_y, baseline.Unquantized_Float2Value_y, compressionModel);
            if ((changeMask & (1 << 28)) != 0)
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_Float2Value_x, baseline.Interpolated_Unquantized_Float2Value_x, compressionModel);
            if ((changeMask & (1 << 28)) != 0)
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_Float2Value_y, baseline.Interpolated_Unquantized_Float2Value_y, compressionModel);
            if ((changeMask & (1 << 29)) != 0)
                writer.WritePackedIntDelta(snapshot.Float3Value_x, baseline.Float3Value_x, compressionModel);
            if ((changeMask & (1 << 29)) != 0)
                writer.WritePackedIntDelta(snapshot.Float3Value_y, baseline.Float3Value_y, compressionModel);
            if ((changeMask & (1 << 29)) != 0)
                writer.WritePackedIntDelta(snapshot.Float3Value_z, baseline.Float3Value_z, compressionModel);
            if ((changeMask & (1 << 30)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_Float3Value_x, baseline.Interpolated_Float3Value_x, compressionModel);
            if ((changeMask & (1 << 30)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_Float3Value_y, baseline.Interpolated_Float3Value_y, compressionModel);
            if ((changeMask & (1 << 30)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_Float3Value_z, baseline.Interpolated_Float3Value_z, compressionModel);
            if ((changeMask & (1 << 31)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Float3Value_x, baseline.Unquantized_Float3Value_x, compressionModel);
            if ((changeMask & (1 << 31)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Float3Value_y, baseline.Unquantized_Float3Value_y, compressionModel);
            if ((changeMask & (1 << 31)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Float3Value_z, baseline.Unquantized_Float3Value_z, compressionModel);
            changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset + 32, ChangeMaskBits - 32);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_Float3Value_x, baseline.Interpolated_Unquantized_Float3Value_x, compressionModel);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_Float3Value_y, baseline.Interpolated_Unquantized_Float3Value_y, compressionModel);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_Float3Value_z, baseline.Interpolated_Unquantized_Float3Value_z, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.Float4Value_x, baseline.Float4Value_x, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.Float4Value_y, baseline.Float4Value_y, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.Float4Value_z, baseline.Float4Value_z, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.Float4Value_w, baseline.Float4Value_w, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_Float4Value_x, baseline.Interpolated_Float4Value_x, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_Float4Value_y, baseline.Interpolated_Float4Value_y, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_Float4Value_z, baseline.Interpolated_Float4Value_z, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedIntDelta(snapshot.Interpolated_Float4Value_w, baseline.Interpolated_Float4Value_w, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Float4Value_x, baseline.Unquantized_Float4Value_x, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Float4Value_y, baseline.Unquantized_Float4Value_y, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Float4Value_z, baseline.Unquantized_Float4Value_z, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedFloatDelta(snapshot.Unquantized_Float4Value_w, baseline.Unquantized_Float4Value_w, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_Float4Value_x, baseline.Interpolated_Unquantized_Float4Value_x, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_Float4Value_y, baseline.Interpolated_Unquantized_Float4Value_y, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_Float4Value_z, baseline.Interpolated_Unquantized_Float4Value_z, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_Float4Value_w, baseline.Interpolated_Unquantized_Float4Value_w, compressionModel);
            if ((changeMask & (1 << 5)) != 0)
            {
                writer.WritePackedIntDelta(snapshot.QuaternionValueX, baseline.QuaternionValueX, compressionModel);
                writer.WritePackedIntDelta(snapshot.QuaternionValueY, baseline.QuaternionValueY, compressionModel);
                writer.WritePackedIntDelta(snapshot.QuaternionValueZ, baseline.QuaternionValueZ, compressionModel);
                writer.WritePackedIntDelta(snapshot.QuaternionValueW, baseline.QuaternionValueW, compressionModel);
            }
            if ((changeMask & (1 << 6)) != 0)
            {
                writer.WritePackedIntDelta(snapshot.Interpolated_QuaternionValueX, baseline.Interpolated_QuaternionValueX, compressionModel);
                writer.WritePackedIntDelta(snapshot.Interpolated_QuaternionValueY, baseline.Interpolated_QuaternionValueY, compressionModel);
                writer.WritePackedIntDelta(snapshot.Interpolated_QuaternionValueZ, baseline.Interpolated_QuaternionValueZ, compressionModel);
                writer.WritePackedIntDelta(snapshot.Interpolated_QuaternionValueW, baseline.Interpolated_QuaternionValueW, compressionModel);
            }
            if ((changeMask & (1 << 7)) != 0)
            {
                writer.WritePackedFloatDelta(snapshot.Unquantized_QuaternionValueX, baseline.Unquantized_QuaternionValueX, compressionModel);
                writer.WritePackedFloatDelta(snapshot.Unquantized_QuaternionValueY, baseline.Unquantized_QuaternionValueY, compressionModel);
                writer.WritePackedFloatDelta(snapshot.Unquantized_QuaternionValueZ, baseline.Unquantized_QuaternionValueZ, compressionModel);
                writer.WritePackedFloatDelta(snapshot.Unquantized_QuaternionValueW, baseline.Unquantized_QuaternionValueW, compressionModel);
            }
            if ((changeMask & (1 << 8)) != 0)
            {
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_QuaternionValueX, baseline.Interpolated_Unquantized_QuaternionValueX, compressionModel);
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_QuaternionValueY, baseline.Interpolated_Unquantized_QuaternionValueY, compressionModel);
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_QuaternionValueZ, baseline.Interpolated_Unquantized_QuaternionValueZ, compressionModel);
                writer.WritePackedFloatDelta(snapshot.Interpolated_Unquantized_QuaternionValueW, baseline.Interpolated_Unquantized_QuaternionValueW, compressionModel);
            }
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedFixedString32Delta(snapshot.String32Value, baseline.String32Value, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedFixedString64Delta(snapshot.String64Value, baseline.String64Value, compressionModel);
            if ((changeMask & (1 << 11)) != 0)
                writer.WritePackedFixedString128Delta(snapshot.String128Value, baseline.String128Value, compressionModel);
            if ((changeMask & (1 << 12)) != 0)
                writer.WritePackedFixedString512Delta(snapshot.String512Value, baseline.String512Value, compressionModel);
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedFixedString4096Delta(snapshot.String4096Value, baseline.String4096Value, compressionModel);
            if ((changeMask & (1 << 14)) != 0)
            {
                writer.WritePackedIntDelta(snapshot.EntityValue, baseline.EntityValue, compressionModel);
                writer.WritePackedUIntDelta(snapshot.EntityValueSpawnTick, baseline.EntityValueSpawnTick, compressionModel);
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.DeserializeDelegate))]
        private static void Deserialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamReader reader, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.Composed_Int3_x = reader.ReadPackedIntDelta(baseline.Composed_Int3_x, compressionModel);
            else
                snapshot.Composed_Int3_x = baseline.Composed_Int3_x;
            if ((changeMask & (1 << 0)) != 0)
                snapshot.Composed_Int3_y = reader.ReadPackedIntDelta(baseline.Composed_Int3_y, compressionModel);
            else
                snapshot.Composed_Int3_y = baseline.Composed_Int3_y;
            if ((changeMask & (1 << 0)) != 0)
                snapshot.Composed_Int3_z = reader.ReadPackedIntDelta(baseline.Composed_Int3_z, compressionModel);
            else
                snapshot.Composed_Int3_z = baseline.Composed_Int3_z;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.Int3_x = reader.ReadPackedIntDelta(baseline.Int3_x, compressionModel);
            else
                snapshot.Int3_x = baseline.Int3_x;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.Int3_y = reader.ReadPackedIntDelta(baseline.Int3_y, compressionModel);
            else
                snapshot.Int3_y = baseline.Int3_y;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.Int3_z = reader.ReadPackedIntDelta(baseline.Int3_z, compressionModel);
            else
                snapshot.Int3_z = baseline.Int3_z;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.Composed_UInt3_x = reader.ReadPackedUIntDelta(baseline.Composed_UInt3_x, compressionModel);
            else
                snapshot.Composed_UInt3_x = baseline.Composed_UInt3_x;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.Composed_UInt3_y = reader.ReadPackedUIntDelta(baseline.Composed_UInt3_y, compressionModel);
            else
                snapshot.Composed_UInt3_y = baseline.Composed_UInt3_y;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.Composed_UInt3_z = reader.ReadPackedUIntDelta(baseline.Composed_UInt3_z, compressionModel);
            else
                snapshot.Composed_UInt3_z = baseline.Composed_UInt3_z;
            if ((changeMask & (1 << 5)) != 0)
                snapshot.UInt3_x = reader.ReadPackedUIntDelta(baseline.UInt3_x, compressionModel);
            else
                snapshot.UInt3_x = baseline.UInt3_x;
            if ((changeMask & (1 << 6)) != 0)
                snapshot.UInt3_y = reader.ReadPackedUIntDelta(baseline.UInt3_y, compressionModel);
            else
                snapshot.UInt3_y = baseline.UInt3_y;
            if ((changeMask & (1 << 7)) != 0)
                snapshot.UInt3_z = reader.ReadPackedUIntDelta(baseline.UInt3_z, compressionModel);
            else
                snapshot.UInt3_z = baseline.UInt3_z;
            if ((changeMask & (1 << 8)) != 0)
                snapshot.ComposedPartial_UInt3_x = reader.ReadPackedUIntDelta(baseline.ComposedPartial_UInt3_x, compressionModel);
            else
                snapshot.ComposedPartial_UInt3_x = baseline.ComposedPartial_UInt3_x;
            if ((changeMask & (1 << 8)) != 0)
                snapshot.ComposedPartial_UInt3_y = reader.ReadPackedUIntDelta(baseline.ComposedPartial_UInt3_y, compressionModel);
            else
                snapshot.ComposedPartial_UInt3_y = baseline.ComposedPartial_UInt3_y;
            if ((changeMask & (1 << 9)) != 0)
                snapshot.Partial_UInt3_x = reader.ReadPackedUIntDelta(baseline.Partial_UInt3_x, compressionModel);
            else
                snapshot.Partial_UInt3_x = baseline.Partial_UInt3_x;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.Partial_UInt3_y = reader.ReadPackedUIntDelta(baseline.Partial_UInt3_y, compressionModel);
            else
                snapshot.Partial_UInt3_y = baseline.Partial_UInt3_y;
            if ((changeMask & (1 << 11)) != 0)
                snapshot.Composed_FloatX_x_x = reader.ReadPackedIntDelta(baseline.Composed_FloatX_x_x, compressionModel);
            else
                snapshot.Composed_FloatX_x_x = baseline.Composed_FloatX_x_x;
            if ((changeMask & (1 << 11)) != 0)
                snapshot.Composed_FloatX_x_y = reader.ReadPackedIntDelta(baseline.Composed_FloatX_x_y, compressionModel);
            else
                snapshot.Composed_FloatX_x_y = baseline.Composed_FloatX_x_y;
            if ((changeMask & (1 << 12)) != 0)
                snapshot.Composed_FloatX_y_x = reader.ReadPackedIntDelta(baseline.Composed_FloatX_y_x, compressionModel);
            else
                snapshot.Composed_FloatX_y_x = baseline.Composed_FloatX_y_x;
            if ((changeMask & (1 << 12)) != 0)
                snapshot.Composed_FloatX_y_y = reader.ReadPackedIntDelta(baseline.Composed_FloatX_y_y, compressionModel);
            else
                snapshot.Composed_FloatX_y_y = baseline.Composed_FloatX_y_y;
            if ((changeMask & (1 << 12)) != 0)
                snapshot.Composed_FloatX_y_z = reader.ReadPackedIntDelta(baseline.Composed_FloatX_y_z, compressionModel);
            else
                snapshot.Composed_FloatX_y_z = baseline.Composed_FloatX_y_z;
            if ((changeMask & (1 << 13)) != 0)
                snapshot.Composed_FloatX_z_x = reader.ReadPackedIntDelta(baseline.Composed_FloatX_z_x, compressionModel);
            else
                snapshot.Composed_FloatX_z_x = baseline.Composed_FloatX_z_x;
            if ((changeMask & (1 << 13)) != 0)
                snapshot.Composed_FloatX_z_y = reader.ReadPackedIntDelta(baseline.Composed_FloatX_z_y, compressionModel);
            else
                snapshot.Composed_FloatX_z_y = baseline.Composed_FloatX_z_y;
            if ((changeMask & (1 << 13)) != 0)
                snapshot.Composed_FloatX_z_z = reader.ReadPackedIntDelta(baseline.Composed_FloatX_z_z, compressionModel);
            else
                snapshot.Composed_FloatX_z_z = baseline.Composed_FloatX_z_z;
            if ((changeMask & (1 << 13)) != 0)
                snapshot.Composed_FloatX_z_w = reader.ReadPackedIntDelta(baseline.Composed_FloatX_z_w, compressionModel);
            else
                snapshot.Composed_FloatX_z_w = baseline.Composed_FloatX_z_w;
            if ((changeMask & (1 << 15)) != 0)
                snapshot.FloatX_x_x = reader.ReadPackedIntDelta(baseline.FloatX_x_x, compressionModel);
            else
                snapshot.FloatX_x_x = baseline.FloatX_x_x;
            if ((changeMask & (1 << 15)) != 0)
                snapshot.FloatX_x_y = reader.ReadPackedIntDelta(baseline.FloatX_x_y, compressionModel);
            else
                snapshot.FloatX_x_y = baseline.FloatX_x_y;
            if ((changeMask & (1 << 16)) != 0)
                snapshot.FloatX_y_x = reader.ReadPackedIntDelta(baseline.FloatX_y_x, compressionModel);
            else
                snapshot.FloatX_y_x = baseline.FloatX_y_x;
            if ((changeMask & (1 << 16)) != 0)
                snapshot.FloatX_y_y = reader.ReadPackedIntDelta(baseline.FloatX_y_y, compressionModel);
            else
                snapshot.FloatX_y_y = baseline.FloatX_y_y;
            if ((changeMask & (1 << 16)) != 0)
                snapshot.FloatX_y_z = reader.ReadPackedIntDelta(baseline.FloatX_y_z, compressionModel);
            else
                snapshot.FloatX_y_z = baseline.FloatX_y_z;
            if ((changeMask & (1 << 17)) != 0)
                snapshot.FloatX_z_x = reader.ReadPackedIntDelta(baseline.FloatX_z_x, compressionModel);
            else
                snapshot.FloatX_z_x = baseline.FloatX_z_x;
            if ((changeMask & (1 << 17)) != 0)
                snapshot.FloatX_z_y = reader.ReadPackedIntDelta(baseline.FloatX_z_y, compressionModel);
            else
                snapshot.FloatX_z_y = baseline.FloatX_z_y;
            if ((changeMask & (1 << 17)) != 0)
                snapshot.FloatX_z_z = reader.ReadPackedIntDelta(baseline.FloatX_z_z, compressionModel);
            else
                snapshot.FloatX_z_z = baseline.FloatX_z_z;
            if ((changeMask & (1 << 17)) != 0)
                snapshot.FloatX_z_w = reader.ReadPackedIntDelta(baseline.FloatX_z_w, compressionModel);
            else
                snapshot.FloatX_z_w = baseline.FloatX_z_w;
            if ((changeMask & (1 << 18)) != 0)
                snapshot.IntValue = reader.ReadPackedIntDelta(baseline.IntValue, compressionModel);
            else
                snapshot.IntValue = baseline.IntValue;
            if ((changeMask & (1 << 19)) != 0)
                snapshot.UIntValue = reader.ReadPackedUIntDelta(baseline.UIntValue, compressionModel);
            else
                snapshot.UIntValue = baseline.UIntValue;
            if ((changeMask & (1 << 20)) != 0)
                snapshot.BoolValue = reader.ReadPackedUIntDelta(baseline.BoolValue, compressionModel);
            else
                snapshot.BoolValue = baseline.BoolValue;
            if ((changeMask & (1 << 21)) != 0)
                snapshot.Unquantized_FloatValue = reader.ReadPackedFloatDelta(baseline.Unquantized_FloatValue, compressionModel);
            else
                snapshot.Unquantized_FloatValue = baseline.Unquantized_FloatValue;
            if ((changeMask & (1 << 22)) != 0)
                snapshot.Unquantized_Interpolated_FloatValue = reader.ReadPackedFloatDelta(baseline.Unquantized_Interpolated_FloatValue, compressionModel);
            else
                snapshot.Unquantized_Interpolated_FloatValue = baseline.Unquantized_Interpolated_FloatValue;
            if ((changeMask & (1 << 23)) != 0)
                snapshot.FloatValue = reader.ReadPackedIntDelta(baseline.FloatValue, compressionModel);
            else
                snapshot.FloatValue = baseline.FloatValue;
            if ((changeMask & (1 << 24)) != 0)
                snapshot.Interpolated_FloatValue = reader.ReadPackedIntDelta(baseline.Interpolated_FloatValue, compressionModel);
            else
                snapshot.Interpolated_FloatValue = baseline.Interpolated_FloatValue;
            if ((changeMask & (1 << 25)) != 0)
                snapshot.Float2Value_x = reader.ReadPackedIntDelta(baseline.Float2Value_x, compressionModel);
            else
                snapshot.Float2Value_x = baseline.Float2Value_x;
            if ((changeMask & (1 << 25)) != 0)
                snapshot.Float2Value_y = reader.ReadPackedIntDelta(baseline.Float2Value_y, compressionModel);
            else
                snapshot.Float2Value_y = baseline.Float2Value_y;
            if ((changeMask & (1 << 26)) != 0)
                snapshot.Interpolated_Float2Value_x = reader.ReadPackedIntDelta(baseline.Interpolated_Float2Value_x, compressionModel);
            else
                snapshot.Interpolated_Float2Value_x = baseline.Interpolated_Float2Value_x;
            if ((changeMask & (1 << 26)) != 0)
                snapshot.Interpolated_Float2Value_y = reader.ReadPackedIntDelta(baseline.Interpolated_Float2Value_y, compressionModel);
            else
                snapshot.Interpolated_Float2Value_y = baseline.Interpolated_Float2Value_y;
            if ((changeMask & (1 << 27)) != 0)
                snapshot.Unquantized_Float2Value_x = reader.ReadPackedFloatDelta(baseline.Unquantized_Float2Value_x, compressionModel);
            else
                snapshot.Unquantized_Float2Value_x = baseline.Unquantized_Float2Value_x;
            if ((changeMask & (1 << 27)) != 0)
                snapshot.Unquantized_Float2Value_y = reader.ReadPackedFloatDelta(baseline.Unquantized_Float2Value_y, compressionModel);
            else
                snapshot.Unquantized_Float2Value_y = baseline.Unquantized_Float2Value_y;
            if ((changeMask & (1 << 28)) != 0)
                snapshot.Interpolated_Unquantized_Float2Value_x = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_Float2Value_x, compressionModel);
            else
                snapshot.Interpolated_Unquantized_Float2Value_x = baseline.Interpolated_Unquantized_Float2Value_x;
            if ((changeMask & (1 << 28)) != 0)
                snapshot.Interpolated_Unquantized_Float2Value_y = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_Float2Value_y, compressionModel);
            else
                snapshot.Interpolated_Unquantized_Float2Value_y = baseline.Interpolated_Unquantized_Float2Value_y;
            if ((changeMask & (1 << 29)) != 0)
                snapshot.Float3Value_x = reader.ReadPackedIntDelta(baseline.Float3Value_x, compressionModel);
            else
                snapshot.Float3Value_x = baseline.Float3Value_x;
            if ((changeMask & (1 << 29)) != 0)
                snapshot.Float3Value_y = reader.ReadPackedIntDelta(baseline.Float3Value_y, compressionModel);
            else
                snapshot.Float3Value_y = baseline.Float3Value_y;
            if ((changeMask & (1 << 29)) != 0)
                snapshot.Float3Value_z = reader.ReadPackedIntDelta(baseline.Float3Value_z, compressionModel);
            else
                snapshot.Float3Value_z = baseline.Float3Value_z;
            if ((changeMask & (1 << 30)) != 0)
                snapshot.Interpolated_Float3Value_x = reader.ReadPackedIntDelta(baseline.Interpolated_Float3Value_x, compressionModel);
            else
                snapshot.Interpolated_Float3Value_x = baseline.Interpolated_Float3Value_x;
            if ((changeMask & (1 << 30)) != 0)
                snapshot.Interpolated_Float3Value_y = reader.ReadPackedIntDelta(baseline.Interpolated_Float3Value_y, compressionModel);
            else
                snapshot.Interpolated_Float3Value_y = baseline.Interpolated_Float3Value_y;
            if ((changeMask & (1 << 30)) != 0)
                snapshot.Interpolated_Float3Value_z = reader.ReadPackedIntDelta(baseline.Interpolated_Float3Value_z, compressionModel);
            else
                snapshot.Interpolated_Float3Value_z = baseline.Interpolated_Float3Value_z;
            if ((changeMask & (1 << 31)) != 0)
                snapshot.Unquantized_Float3Value_x = reader.ReadPackedFloatDelta(baseline.Unquantized_Float3Value_x, compressionModel);
            else
                snapshot.Unquantized_Float3Value_x = baseline.Unquantized_Float3Value_x;
            if ((changeMask & (1 << 31)) != 0)
                snapshot.Unquantized_Float3Value_y = reader.ReadPackedFloatDelta(baseline.Unquantized_Float3Value_y, compressionModel);
            else
                snapshot.Unquantized_Float3Value_y = baseline.Unquantized_Float3Value_y;
            if ((changeMask & (1 << 31)) != 0)
                snapshot.Unquantized_Float3Value_z = reader.ReadPackedFloatDelta(baseline.Unquantized_Float3Value_z, compressionModel);
            else
                snapshot.Unquantized_Float3Value_z = baseline.Unquantized_Float3Value_z;
            changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset + 32, ChangeMaskBits - 32);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.Interpolated_Unquantized_Float3Value_x = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_Float3Value_x, compressionModel);
            else
                snapshot.Interpolated_Unquantized_Float3Value_x = baseline.Interpolated_Unquantized_Float3Value_x;
            if ((changeMask & (1 << 0)) != 0)
                snapshot.Interpolated_Unquantized_Float3Value_y = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_Float3Value_y, compressionModel);
            else
                snapshot.Interpolated_Unquantized_Float3Value_y = baseline.Interpolated_Unquantized_Float3Value_y;
            if ((changeMask & (1 << 0)) != 0)
                snapshot.Interpolated_Unquantized_Float3Value_z = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_Float3Value_z, compressionModel);
            else
                snapshot.Interpolated_Unquantized_Float3Value_z = baseline.Interpolated_Unquantized_Float3Value_z;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.Float4Value_x = reader.ReadPackedIntDelta(baseline.Float4Value_x, compressionModel);
            else
                snapshot.Float4Value_x = baseline.Float4Value_x;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.Float4Value_y = reader.ReadPackedIntDelta(baseline.Float4Value_y, compressionModel);
            else
                snapshot.Float4Value_y = baseline.Float4Value_y;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.Float4Value_z = reader.ReadPackedIntDelta(baseline.Float4Value_z, compressionModel);
            else
                snapshot.Float4Value_z = baseline.Float4Value_z;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.Float4Value_w = reader.ReadPackedIntDelta(baseline.Float4Value_w, compressionModel);
            else
                snapshot.Float4Value_w = baseline.Float4Value_w;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.Interpolated_Float4Value_x = reader.ReadPackedIntDelta(baseline.Interpolated_Float4Value_x, compressionModel);
            else
                snapshot.Interpolated_Float4Value_x = baseline.Interpolated_Float4Value_x;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.Interpolated_Float4Value_y = reader.ReadPackedIntDelta(baseline.Interpolated_Float4Value_y, compressionModel);
            else
                snapshot.Interpolated_Float4Value_y = baseline.Interpolated_Float4Value_y;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.Interpolated_Float4Value_z = reader.ReadPackedIntDelta(baseline.Interpolated_Float4Value_z, compressionModel);
            else
                snapshot.Interpolated_Float4Value_z = baseline.Interpolated_Float4Value_z;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.Interpolated_Float4Value_w = reader.ReadPackedIntDelta(baseline.Interpolated_Float4Value_w, compressionModel);
            else
                snapshot.Interpolated_Float4Value_w = baseline.Interpolated_Float4Value_w;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.Unquantized_Float4Value_x = reader.ReadPackedFloatDelta(baseline.Unquantized_Float4Value_x, compressionModel);
            else
                snapshot.Unquantized_Float4Value_x = baseline.Unquantized_Float4Value_x;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.Unquantized_Float4Value_y = reader.ReadPackedFloatDelta(baseline.Unquantized_Float4Value_y, compressionModel);
            else
                snapshot.Unquantized_Float4Value_y = baseline.Unquantized_Float4Value_y;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.Unquantized_Float4Value_z = reader.ReadPackedFloatDelta(baseline.Unquantized_Float4Value_z, compressionModel);
            else
                snapshot.Unquantized_Float4Value_z = baseline.Unquantized_Float4Value_z;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.Unquantized_Float4Value_w = reader.ReadPackedFloatDelta(baseline.Unquantized_Float4Value_w, compressionModel);
            else
                snapshot.Unquantized_Float4Value_w = baseline.Unquantized_Float4Value_w;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.Interpolated_Unquantized_Float4Value_x = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_Float4Value_x, compressionModel);
            else
                snapshot.Interpolated_Unquantized_Float4Value_x = baseline.Interpolated_Unquantized_Float4Value_x;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.Interpolated_Unquantized_Float4Value_y = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_Float4Value_y, compressionModel);
            else
                snapshot.Interpolated_Unquantized_Float4Value_y = baseline.Interpolated_Unquantized_Float4Value_y;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.Interpolated_Unquantized_Float4Value_z = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_Float4Value_z, compressionModel);
            else
                snapshot.Interpolated_Unquantized_Float4Value_z = baseline.Interpolated_Unquantized_Float4Value_z;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.Interpolated_Unquantized_Float4Value_w = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_Float4Value_w, compressionModel);
            else
                snapshot.Interpolated_Unquantized_Float4Value_w = baseline.Interpolated_Unquantized_Float4Value_w;
            if ((changeMask & (1 << 5)) != 0)
            {
                snapshot.QuaternionValueX = reader.ReadPackedIntDelta(baseline.QuaternionValueX, compressionModel);
                snapshot.QuaternionValueY = reader.ReadPackedIntDelta(baseline.QuaternionValueY, compressionModel);
                snapshot.QuaternionValueZ = reader.ReadPackedIntDelta(baseline.QuaternionValueZ, compressionModel);
                snapshot.QuaternionValueW = reader.ReadPackedIntDelta(baseline.QuaternionValueW, compressionModel);
            }
            else
            {
                snapshot.QuaternionValueX = baseline.QuaternionValueX;
                snapshot.QuaternionValueY = baseline.QuaternionValueY;
                snapshot.QuaternionValueZ = baseline.QuaternionValueZ;
                snapshot.QuaternionValueW = baseline.QuaternionValueW;
            }
            if ((changeMask & (1 << 6)) != 0)
            {
                snapshot.Interpolated_QuaternionValueX = reader.ReadPackedIntDelta(baseline.Interpolated_QuaternionValueX, compressionModel);
                snapshot.Interpolated_QuaternionValueY = reader.ReadPackedIntDelta(baseline.Interpolated_QuaternionValueY, compressionModel);
                snapshot.Interpolated_QuaternionValueZ = reader.ReadPackedIntDelta(baseline.Interpolated_QuaternionValueZ, compressionModel);
                snapshot.Interpolated_QuaternionValueW = reader.ReadPackedIntDelta(baseline.Interpolated_QuaternionValueW, compressionModel);
            }
            else
            {
                snapshot.Interpolated_QuaternionValueX = baseline.Interpolated_QuaternionValueX;
                snapshot.Interpolated_QuaternionValueY = baseline.Interpolated_QuaternionValueY;
                snapshot.Interpolated_QuaternionValueZ = baseline.Interpolated_QuaternionValueZ;
                snapshot.Interpolated_QuaternionValueW = baseline.Interpolated_QuaternionValueW;
            }
            if ((changeMask & (1 << 7)) != 0)
            {
                snapshot.Unquantized_QuaternionValueX = reader.ReadPackedFloatDelta(baseline.Unquantized_QuaternionValueX, compressionModel);
                snapshot.Unquantized_QuaternionValueY = reader.ReadPackedFloatDelta(baseline.Unquantized_QuaternionValueY, compressionModel);
                snapshot.Unquantized_QuaternionValueZ = reader.ReadPackedFloatDelta(baseline.Unquantized_QuaternionValueZ, compressionModel);
                snapshot.Unquantized_QuaternionValueW = reader.ReadPackedFloatDelta(baseline.Unquantized_QuaternionValueW, compressionModel);
            }
            else
            {
                snapshot.Unquantized_QuaternionValueX = baseline.Unquantized_QuaternionValueX;
                snapshot.Unquantized_QuaternionValueY = baseline.Unquantized_QuaternionValueY;
                snapshot.Unquantized_QuaternionValueZ = baseline.Unquantized_QuaternionValueZ;
                snapshot.Unquantized_QuaternionValueW = baseline.Unquantized_QuaternionValueW;
            }
            if ((changeMask & (1 << 8)) != 0)
            {
                snapshot.Interpolated_Unquantized_QuaternionValueX = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_QuaternionValueX, compressionModel);
                snapshot.Interpolated_Unquantized_QuaternionValueY = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_QuaternionValueY, compressionModel);
                snapshot.Interpolated_Unquantized_QuaternionValueZ = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_QuaternionValueZ, compressionModel);
                snapshot.Interpolated_Unquantized_QuaternionValueW = reader.ReadPackedFloatDelta(baseline.Interpolated_Unquantized_QuaternionValueW, compressionModel);
            }
            else
            {
                snapshot.Interpolated_Unquantized_QuaternionValueX = baseline.Interpolated_Unquantized_QuaternionValueX;
                snapshot.Interpolated_Unquantized_QuaternionValueY = baseline.Interpolated_Unquantized_QuaternionValueY;
                snapshot.Interpolated_Unquantized_QuaternionValueZ = baseline.Interpolated_Unquantized_QuaternionValueZ;
                snapshot.Interpolated_Unquantized_QuaternionValueW = baseline.Interpolated_Unquantized_QuaternionValueW;
            }
            if ((changeMask & (1 << 9)) != 0)
                snapshot.String32Value = reader.ReadPackedFixedString32Delta(baseline.String32Value, compressionModel);
            else
                snapshot.String32Value = baseline.String32Value;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.String64Value = reader.ReadPackedFixedString64Delta(baseline.String64Value, compressionModel);
            else
                snapshot.String64Value = baseline.String64Value;
            if ((changeMask & (1 << 11)) != 0)
                snapshot.String128Value = reader.ReadPackedFixedString128Delta(baseline.String128Value, compressionModel);
            else
                snapshot.String128Value = baseline.String128Value;
            if ((changeMask & (1 << 12)) != 0)
                snapshot.String512Value = reader.ReadPackedFixedString512Delta(baseline.String512Value, compressionModel);
            else
                snapshot.String512Value = baseline.String512Value;
            if ((changeMask & (1 << 13)) != 0)
                snapshot.String4096Value = reader.ReadPackedFixedString4096Delta(baseline.String4096Value, compressionModel);
            else
                snapshot.String4096Value = baseline.String4096Value;
            if ((changeMask & (1 << 14)) != 0)
            {
                snapshot.EntityValue = reader.ReadPackedIntDelta(baseline.EntityValue, compressionModel);
                snapshot.EntityValueSpawnTick = reader.ReadPackedUIntDelta(baseline.EntityValueSpawnTick, compressionModel);
            }
            else
            {
                snapshot.EntityValue = baseline.EntityValue;
                snapshot.EntityValueSpawnTick = baseline.EntityValueSpawnTick;
            }
        }
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.ReportPredictionErrorsDelegate))]
        private static void ReportPredictionErrors(IntPtr componentData, IntPtr backupData, ref UnsafeList<float> errors)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypeFlat>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypeFlat>(backupData, 0);
            int errorIndex = 0;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.Composed_Int3.x - backup.Composed_Int3.x));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.Composed_Int3.y - backup.Composed_Int3.y));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.Composed_Int3.z - backup.Composed_Int3.z));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.Int3.x - backup.Int3.x));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.Int3.y - backup.Int3.y));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.Int3.z - backup.Int3.z));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.Composed_UInt3.x > backup.Composed_UInt3.x) ?
                (component.Composed_UInt3.x - backup.Composed_UInt3.x) :
                (backup.Composed_UInt3.x - component.Composed_UInt3.x));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.Composed_UInt3.y > backup.Composed_UInt3.y) ?
                (component.Composed_UInt3.y - backup.Composed_UInt3.y) :
                (backup.Composed_UInt3.y - component.Composed_UInt3.y));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.Composed_UInt3.z > backup.Composed_UInt3.z) ?
                (component.Composed_UInt3.z - backup.Composed_UInt3.z) :
                (backup.Composed_UInt3.z - component.Composed_UInt3.z));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.UInt3.x > backup.UInt3.x) ?
                (component.UInt3.x - backup.UInt3.x) :
                (backup.UInt3.x - component.UInt3.x));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.UInt3.y > backup.UInt3.y) ?
                (component.UInt3.y - backup.UInt3.y) :
                (backup.UInt3.y - component.UInt3.y));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.UInt3.z > backup.UInt3.z) ?
                (component.UInt3.z - backup.UInt3.z) :
                (backup.UInt3.z - component.UInt3.z));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.ComposedPartial_UInt3.x > backup.ComposedPartial_UInt3.x) ?
                (component.ComposedPartial_UInt3.x - backup.ComposedPartial_UInt3.x) :
                (backup.ComposedPartial_UInt3.x - component.ComposedPartial_UInt3.x));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.ComposedPartial_UInt3.y > backup.ComposedPartial_UInt3.y) ?
                (component.ComposedPartial_UInt3.y - backup.ComposedPartial_UInt3.y) :
                (backup.ComposedPartial_UInt3.y - component.ComposedPartial_UInt3.y));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.Partial_UInt3.x > backup.Partial_UInt3.x) ?
                (component.Partial_UInt3.x - backup.Partial_UInt3.x) :
                (backup.Partial_UInt3.x - component.Partial_UInt3.x));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.Partial_UInt3.y > backup.Partial_UInt3.y) ?
                (component.Partial_UInt3.y - backup.Partial_UInt3.y) :
                (backup.Partial_UInt3.y - component.Partial_UInt3.y));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Composed_FloatX.x, backup.Composed_FloatX.x));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Composed_FloatX.y, backup.Composed_FloatX.y));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Composed_FloatX.z, backup.Composed_FloatX.z));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.FloatX.x, backup.FloatX.x));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.FloatX.y, backup.FloatX.y));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.FloatX.z, backup.FloatX.z));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.IntValue - backup.IntValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.UIntValue > backup.UIntValue) ?
                (component.UIntValue - backup.UIntValue) :
                (backup.UIntValue - component.UIntValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], (component.BoolValue != backup.BoolValue) ? 1 : 0);
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.Unquantized_FloatValue - backup.Unquantized_FloatValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.Unquantized_Interpolated_FloatValue - backup.Unquantized_Interpolated_FloatValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.FloatValue - backup.FloatValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.Interpolated_FloatValue - backup.Interpolated_FloatValue));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Float2Value, backup.Float2Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Interpolated_Float2Value, backup.Interpolated_Float2Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Unquantized_Float2Value, backup.Unquantized_Float2Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Interpolated_Unquantized_Float2Value, backup.Interpolated_Unquantized_Float2Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Float3Value, backup.Float3Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Interpolated_Float3Value, backup.Interpolated_Float3Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Unquantized_Float3Value, backup.Unquantized_Float3Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Interpolated_Unquantized_Float3Value, backup.Interpolated_Unquantized_Float3Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Float4Value, backup.Float4Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Interpolated_Float4Value, backup.Interpolated_Float4Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Unquantized_Float4Value, backup.Unquantized_Float4Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Interpolated_Unquantized_Float4Value, backup.Interpolated_Unquantized_Float4Value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.QuaternionValue.value, backup.QuaternionValue.value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Interpolated_QuaternionValue.value, backup.Interpolated_QuaternionValue.value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Unquantized_QuaternionValue.value, backup.Unquantized_QuaternionValue.value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Interpolated_Unquantized_QuaternionValue.value, backup.Interpolated_Unquantized_QuaternionValue.value));
            ++errorIndex;
        }
        private static int GetPredictionErrorNames(ref FixedString512 names)
        {
            int nameCount = 0;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Composed_Int3.x"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Composed_Int3.y"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Composed_Int3.z"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Int3.x"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Int3.y"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Int3.z"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Composed_UInt3.x"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Composed_UInt3.y"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Composed_UInt3.z"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UInt3.x"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UInt3.y"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UInt3.z"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("ComposedPartial_UInt3.x"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("ComposedPartial_UInt3.y"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Partial_UInt3.x"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Partial_UInt3.y"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Composed_FloatX.x"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Composed_FloatX.y"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Composed_FloatX.z"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("FloatX.x"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("FloatX.y"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("FloatX.z"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("IntValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UIntValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("BoolValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Unquantized_FloatValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Unquantized_Interpolated_FloatValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("FloatValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Interpolated_FloatValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Float2Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Interpolated_Float2Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Unquantized_Float2Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Interpolated_Unquantized_Float2Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Float3Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Interpolated_Float3Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Unquantized_Float3Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Interpolated_Unquantized_Float3Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Float4Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Interpolated_Float4Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Unquantized_Float4Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Interpolated_Unquantized_Float4Value"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("QuaternionValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Interpolated_QuaternionValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Unquantized_QuaternionValue"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Interpolated_Unquantized_QuaternionValue"));
            ++nameCount;
            return nameCount;
        }
        #endif
    }
}
