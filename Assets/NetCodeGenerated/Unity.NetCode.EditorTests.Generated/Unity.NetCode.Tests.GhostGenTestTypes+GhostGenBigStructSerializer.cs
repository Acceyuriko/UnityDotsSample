//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using System;
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.NetCode.LowLevel.Unsafe;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;

namespace Unity.NetCode.EditorTests.Generated
{
    [BurstCompile]
    public struct UnityNetCodeTestsGhostGenTestTypes_GhostGenBigStructGhostComponentSerializer
    {
        static GhostComponentSerializer.State GetState()
        {
            // This needs to be lazy initialized because otherwise there is a depenency on the static initialization order which breaks il2cpp builds due to TYpeManager not being initialized yet
            if (!s_StateInitialized)
            {
                s_State = new GhostComponentSerializer.State
                {
                    GhostFieldsHash = 8385901172123213065,
                    ExcludeFromComponentCollectionHash = 1,
                    ComponentType = ComponentType.ReadWrite<Unity.NetCode.Tests.GhostGenTestTypes.GhostGenBigStruct>(),
                    ComponentSize = UnsafeUtility.SizeOf<Unity.NetCode.Tests.GhostGenTestTypes.GhostGenBigStruct>(),
                    SnapshotSize = UnsafeUtility.SizeOf<Snapshot>(),
                    ChangeMaskBits = ChangeMaskBits,
                    SendMask = GhostComponentSerializer.SendMask.Interpolated | GhostComponentSerializer.SendMask.Predicted,
                    SendToOwner = SendToOwnerType.All,
                    SendForChildEntities = 1,
                    VariantHash = 0,
                    CopyToSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyToSnapshot),
                    CopyFromSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyFromSnapshot),
                    RestoreFromBackup =
                        new PortableFunctionPointer<GhostComponentSerializer.RestoreFromBackupDelegate>(RestoreFromBackup),
                    PredictDelta = new PortableFunctionPointer<GhostComponentSerializer.PredictDeltaDelegate>(PredictDelta),
                    CalculateChangeMask =
                        new PortableFunctionPointer<GhostComponentSerializer.CalculateChangeMaskDelegate>(
                            CalculateChangeMask),
                    Serialize = new PortableFunctionPointer<GhostComponentSerializer.SerializeDelegate>(Serialize),
                    Deserialize = new PortableFunctionPointer<GhostComponentSerializer.DeserializeDelegate>(Deserialize),
                    #if UNITY_EDITOR || DEVELOPMENT_BUILD
                    ReportPredictionErrors = new PortableFunctionPointer<GhostComponentSerializer.ReportPredictionErrorsDelegate>(ReportPredictionErrors),
                    #endif
                };
                #if UNITY_EDITOR || DEVELOPMENT_BUILD
                s_State.NumPredictionErrorNames = GetPredictionErrorNames(ref s_State.PredictionErrorNames);
                #endif
                s_StateInitialized = true;
            }
            return s_State;
        }
        private static bool s_StateInitialized;
        private static GhostComponentSerializer.State s_State;
        public static GhostComponentSerializer.State State => GetState();
        public struct Snapshot
        {
            public int field000;
            public int field001;
            public int field002;
            public int field003;
            public int field004;
            public int field005;
            public int field006;
            public int field007;
            public int field008;
            public int field009;
            public int field010;
            public int field011;
            public int field012;
            public int field013;
            public int field014;
            public int field015;
            public int field016;
            public int field017;
            public int field018;
            public int field019;
            public int field020;
            public int field021;
            public int field022;
            public int field023;
            public int field024;
            public int field025;
            public int field026;
            public int field027;
            public int field028;
            public int field029;
            public int field030;
            public int field031;
            public int field032;
            public int field033;
            public int field034;
            public int field035;
            public int field036;
            public int field037;
            public int field038;
            public int field039;
            public int field040;
            public int field041;
            public int field042;
            public int field043;
            public int field044;
            public int field045;
            public int field046;
            public int field047;
            public int field048;
            public int field049;
            public int field050;
            public int field051;
            public int field052;
            public int field053;
            public int field054;
            public int field055;
            public int field056;
            public int field057;
            public int field058;
            public int field059;
            public int field060;
            public int field061;
            public int field062;
            public int field063;
            public int field064;
            public int field065;
            public int field066;
            public int field067;
            public int field068;
            public int field069;
            public int field070;
            public int field071;
            public int field072;
            public int field073;
            public int field074;
            public int field075;
            public int field076;
            public int field077;
            public int field078;
            public int field079;
            public int field080;
            public int field081;
            public int field082;
            public int field083;
            public int field084;
            public int field085;
            public int field086;
            public int field087;
            public int field088;
            public int field089;
            public int field090;
            public int field091;
            public int field092;
            public int field093;
            public int field094;
            public int field095;
            public int field096;
            public int field097;
            public int field098;
            public int field099;
            public int field100;
        }
        public const int ChangeMaskBits = 101;
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyToSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData, snapshotOffset + snapshotStride*i);
                ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypes.GhostGenBigStruct>(componentData, componentStride*i);
                ref var serializerState = ref GhostComponentSerializer.TypeCast<GhostSerializerState>(stateData, 0);
                snapshot.field000 = (int) component.field000;
                snapshot.field001 = (int) component.field001;
                snapshot.field002 = (int) component.field002;
                snapshot.field003 = (int) component.field003;
                snapshot.field004 = (int) component.field004;
                snapshot.field005 = (int) component.field005;
                snapshot.field006 = (int) component.field006;
                snapshot.field007 = (int) component.field007;
                snapshot.field008 = (int) component.field008;
                snapshot.field009 = (int) component.field009;
                snapshot.field010 = (int) component.field010;
                snapshot.field011 = (int) component.field011;
                snapshot.field012 = (int) component.field012;
                snapshot.field013 = (int) component.field013;
                snapshot.field014 = (int) component.field014;
                snapshot.field015 = (int) component.field015;
                snapshot.field016 = (int) component.field016;
                snapshot.field017 = (int) component.field017;
                snapshot.field018 = (int) component.field018;
                snapshot.field019 = (int) component.field019;
                snapshot.field020 = (int) component.field020;
                snapshot.field021 = (int) component.field021;
                snapshot.field022 = (int) component.field022;
                snapshot.field023 = (int) component.field023;
                snapshot.field024 = (int) component.field024;
                snapshot.field025 = (int) component.field025;
                snapshot.field026 = (int) component.field026;
                snapshot.field027 = (int) component.field027;
                snapshot.field028 = (int) component.field028;
                snapshot.field029 = (int) component.field029;
                snapshot.field030 = (int) component.field030;
                snapshot.field031 = (int) component.field031;
                snapshot.field032 = (int) component.field032;
                snapshot.field033 = (int) component.field033;
                snapshot.field034 = (int) component.field034;
                snapshot.field035 = (int) component.field035;
                snapshot.field036 = (int) component.field036;
                snapshot.field037 = (int) component.field037;
                snapshot.field038 = (int) component.field038;
                snapshot.field039 = (int) component.field039;
                snapshot.field040 = (int) component.field040;
                snapshot.field041 = (int) component.field041;
                snapshot.field042 = (int) component.field042;
                snapshot.field043 = (int) component.field043;
                snapshot.field044 = (int) component.field044;
                snapshot.field045 = (int) component.field045;
                snapshot.field046 = (int) component.field046;
                snapshot.field047 = (int) component.field047;
                snapshot.field048 = (int) component.field048;
                snapshot.field049 = (int) component.field049;
                snapshot.field050 = (int) component.field050;
                snapshot.field051 = (int) component.field051;
                snapshot.field052 = (int) component.field052;
                snapshot.field053 = (int) component.field053;
                snapshot.field054 = (int) component.field054;
                snapshot.field055 = (int) component.field055;
                snapshot.field056 = (int) component.field056;
                snapshot.field057 = (int) component.field057;
                snapshot.field058 = (int) component.field058;
                snapshot.field059 = (int) component.field059;
                snapshot.field060 = (int) component.field060;
                snapshot.field061 = (int) component.field061;
                snapshot.field062 = (int) component.field062;
                snapshot.field063 = (int) component.field063;
                snapshot.field064 = (int) component.field064;
                snapshot.field065 = (int) component.field065;
                snapshot.field066 = (int) component.field066;
                snapshot.field067 = (int) component.field067;
                snapshot.field068 = (int) component.field068;
                snapshot.field069 = (int) component.field069;
                snapshot.field070 = (int) component.field070;
                snapshot.field071 = (int) component.field071;
                snapshot.field072 = (int) component.field072;
                snapshot.field073 = (int) component.field073;
                snapshot.field074 = (int) component.field074;
                snapshot.field075 = (int) component.field075;
                snapshot.field076 = (int) component.field076;
                snapshot.field077 = (int) component.field077;
                snapshot.field078 = (int) component.field078;
                snapshot.field079 = (int) component.field079;
                snapshot.field080 = (int) component.field080;
                snapshot.field081 = (int) component.field081;
                snapshot.field082 = (int) component.field082;
                snapshot.field083 = (int) component.field083;
                snapshot.field084 = (int) component.field084;
                snapshot.field085 = (int) component.field085;
                snapshot.field086 = (int) component.field086;
                snapshot.field087 = (int) component.field087;
                snapshot.field088 = (int) component.field088;
                snapshot.field089 = (int) component.field089;
                snapshot.field090 = (int) component.field090;
                snapshot.field091 = (int) component.field091;
                snapshot.field092 = (int) component.field092;
                snapshot.field093 = (int) component.field093;
                snapshot.field094 = (int) component.field094;
                snapshot.field095 = (int) component.field095;
                snapshot.field096 = (int) component.field096;
                snapshot.field097 = (int) component.field097;
                snapshot.field098 = (int) component.field098;
                snapshot.field099 = (int) component.field099;
                snapshot.field100 = (int) component.field100;
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);
                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);
                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);
                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);
                //Compute the required owner mask for the components and buffers by retrievieng the ghost owner id from the data for the current tick.
                if (snapshotInterpolationData.GhostOwner > 0)
                {
                    var requiredOwnerMask = snapshotInterpolationData.GhostOwner == deserializerState.GhostOwner
                        ? SendToOwnerType.SendToOwner
                        : SendToOwnerType.SendToNonOwner;
                    if ((deserializerState.SendToOwner & requiredOwnerMask) == 0)
                        continue;
                }
                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;
                float snapshotInterpolationFactorRaw = snapshotInterpolationData.InterpolationFactor;
                float snapshotInterpolationFactor = snapshotInterpolationFactorRaw;
                ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypes.GhostGenBigStruct>(componentData, componentStride*i);
                component.field000 = (int) snapshotBefore.field000;
                component.field001 = (int) snapshotBefore.field001;
                component.field002 = (int) snapshotBefore.field002;
                component.field003 = (int) snapshotBefore.field003;
                component.field004 = (int) snapshotBefore.field004;
                component.field005 = (int) snapshotBefore.field005;
                component.field006 = (int) snapshotBefore.field006;
                component.field007 = (int) snapshotBefore.field007;
                component.field008 = (int) snapshotBefore.field008;
                component.field009 = (int) snapshotBefore.field009;
                component.field010 = (int) snapshotBefore.field010;
                component.field011 = (int) snapshotBefore.field011;
                component.field012 = (int) snapshotBefore.field012;
                component.field013 = (int) snapshotBefore.field013;
                component.field014 = (int) snapshotBefore.field014;
                component.field015 = (int) snapshotBefore.field015;
                component.field016 = (int) snapshotBefore.field016;
                component.field017 = (int) snapshotBefore.field017;
                component.field018 = (int) snapshotBefore.field018;
                component.field019 = (int) snapshotBefore.field019;
                component.field020 = (int) snapshotBefore.field020;
                component.field021 = (int) snapshotBefore.field021;
                component.field022 = (int) snapshotBefore.field022;
                component.field023 = (int) snapshotBefore.field023;
                component.field024 = (int) snapshotBefore.field024;
                component.field025 = (int) snapshotBefore.field025;
                component.field026 = (int) snapshotBefore.field026;
                component.field027 = (int) snapshotBefore.field027;
                component.field028 = (int) snapshotBefore.field028;
                component.field029 = (int) snapshotBefore.field029;
                component.field030 = (int) snapshotBefore.field030;
                component.field031 = (int) snapshotBefore.field031;
                component.field032 = (int) snapshotBefore.field032;
                component.field033 = (int) snapshotBefore.field033;
                component.field034 = (int) snapshotBefore.field034;
                component.field035 = (int) snapshotBefore.field035;
                component.field036 = (int) snapshotBefore.field036;
                component.field037 = (int) snapshotBefore.field037;
                component.field038 = (int) snapshotBefore.field038;
                component.field039 = (int) snapshotBefore.field039;
                component.field040 = (int) snapshotBefore.field040;
                component.field041 = (int) snapshotBefore.field041;
                component.field042 = (int) snapshotBefore.field042;
                component.field043 = (int) snapshotBefore.field043;
                component.field044 = (int) snapshotBefore.field044;
                component.field045 = (int) snapshotBefore.field045;
                component.field046 = (int) snapshotBefore.field046;
                component.field047 = (int) snapshotBefore.field047;
                component.field048 = (int) snapshotBefore.field048;
                component.field049 = (int) snapshotBefore.field049;
                component.field050 = (int) snapshotBefore.field050;
                component.field051 = (int) snapshotBefore.field051;
                component.field052 = (int) snapshotBefore.field052;
                component.field053 = (int) snapshotBefore.field053;
                component.field054 = (int) snapshotBefore.field054;
                component.field055 = (int) snapshotBefore.field055;
                component.field056 = (int) snapshotBefore.field056;
                component.field057 = (int) snapshotBefore.field057;
                component.field058 = (int) snapshotBefore.field058;
                component.field059 = (int) snapshotBefore.field059;
                component.field060 = (int) snapshotBefore.field060;
                component.field061 = (int) snapshotBefore.field061;
                component.field062 = (int) snapshotBefore.field062;
                component.field063 = (int) snapshotBefore.field063;
                component.field064 = (int) snapshotBefore.field064;
                component.field065 = (int) snapshotBefore.field065;
                component.field066 = (int) snapshotBefore.field066;
                component.field067 = (int) snapshotBefore.field067;
                component.field068 = (int) snapshotBefore.field068;
                component.field069 = (int) snapshotBefore.field069;
                component.field070 = (int) snapshotBefore.field070;
                component.field071 = (int) snapshotBefore.field071;
                component.field072 = (int) snapshotBefore.field072;
                component.field073 = (int) snapshotBefore.field073;
                component.field074 = (int) snapshotBefore.field074;
                component.field075 = (int) snapshotBefore.field075;
                component.field076 = (int) snapshotBefore.field076;
                component.field077 = (int) snapshotBefore.field077;
                component.field078 = (int) snapshotBefore.field078;
                component.field079 = (int) snapshotBefore.field079;
                component.field080 = (int) snapshotBefore.field080;
                component.field081 = (int) snapshotBefore.field081;
                component.field082 = (int) snapshotBefore.field082;
                component.field083 = (int) snapshotBefore.field083;
                component.field084 = (int) snapshotBefore.field084;
                component.field085 = (int) snapshotBefore.field085;
                component.field086 = (int) snapshotBefore.field086;
                component.field087 = (int) snapshotBefore.field087;
                component.field088 = (int) snapshotBefore.field088;
                component.field089 = (int) snapshotBefore.field089;
                component.field090 = (int) snapshotBefore.field090;
                component.field091 = (int) snapshotBefore.field091;
                component.field092 = (int) snapshotBefore.field092;
                component.field093 = (int) snapshotBefore.field093;
                component.field094 = (int) snapshotBefore.field094;
                component.field095 = (int) snapshotBefore.field095;
                component.field096 = (int) snapshotBefore.field096;
                component.field097 = (int) snapshotBefore.field097;
                component.field098 = (int) snapshotBefore.field098;
                component.field099 = (int) snapshotBefore.field099;
                component.field100 = (int) snapshotBefore.field100;

            }
        }


        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.RestoreFromBackupDelegate))]
        private static void RestoreFromBackup(IntPtr componentData, IntPtr backupData)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypes.GhostGenBigStruct>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypes.GhostGenBigStruct>(backupData, 0);
            component.field000 = backup.field000;
            component.field001 = backup.field001;
            component.field002 = backup.field002;
            component.field003 = backup.field003;
            component.field004 = backup.field004;
            component.field005 = backup.field005;
            component.field006 = backup.field006;
            component.field007 = backup.field007;
            component.field008 = backup.field008;
            component.field009 = backup.field009;
            component.field010 = backup.field010;
            component.field011 = backup.field011;
            component.field012 = backup.field012;
            component.field013 = backup.field013;
            component.field014 = backup.field014;
            component.field015 = backup.field015;
            component.field016 = backup.field016;
            component.field017 = backup.field017;
            component.field018 = backup.field018;
            component.field019 = backup.field019;
            component.field020 = backup.field020;
            component.field021 = backup.field021;
            component.field022 = backup.field022;
            component.field023 = backup.field023;
            component.field024 = backup.field024;
            component.field025 = backup.field025;
            component.field026 = backup.field026;
            component.field027 = backup.field027;
            component.field028 = backup.field028;
            component.field029 = backup.field029;
            component.field030 = backup.field030;
            component.field031 = backup.field031;
            component.field032 = backup.field032;
            component.field033 = backup.field033;
            component.field034 = backup.field034;
            component.field035 = backup.field035;
            component.field036 = backup.field036;
            component.field037 = backup.field037;
            component.field038 = backup.field038;
            component.field039 = backup.field039;
            component.field040 = backup.field040;
            component.field041 = backup.field041;
            component.field042 = backup.field042;
            component.field043 = backup.field043;
            component.field044 = backup.field044;
            component.field045 = backup.field045;
            component.field046 = backup.field046;
            component.field047 = backup.field047;
            component.field048 = backup.field048;
            component.field049 = backup.field049;
            component.field050 = backup.field050;
            component.field051 = backup.field051;
            component.field052 = backup.field052;
            component.field053 = backup.field053;
            component.field054 = backup.field054;
            component.field055 = backup.field055;
            component.field056 = backup.field056;
            component.field057 = backup.field057;
            component.field058 = backup.field058;
            component.field059 = backup.field059;
            component.field060 = backup.field060;
            component.field061 = backup.field061;
            component.field062 = backup.field062;
            component.field063 = backup.field063;
            component.field064 = backup.field064;
            component.field065 = backup.field065;
            component.field066 = backup.field066;
            component.field067 = backup.field067;
            component.field068 = backup.field068;
            component.field069 = backup.field069;
            component.field070 = backup.field070;
            component.field071 = backup.field071;
            component.field072 = backup.field072;
            component.field073 = backup.field073;
            component.field074 = backup.field074;
            component.field075 = backup.field075;
            component.field076 = backup.field076;
            component.field077 = backup.field077;
            component.field078 = backup.field078;
            component.field079 = backup.field079;
            component.field080 = backup.field080;
            component.field081 = backup.field081;
            component.field082 = backup.field082;
            component.field083 = backup.field083;
            component.field084 = backup.field084;
            component.field085 = backup.field085;
            component.field086 = backup.field086;
            component.field087 = backup.field087;
            component.field088 = backup.field088;
            component.field089 = backup.field089;
            component.field090 = backup.field090;
            component.field091 = backup.field091;
            component.field092 = backup.field092;
            component.field093 = backup.field093;
            component.field094 = backup.field094;
            component.field095 = backup.field095;
            component.field096 = backup.field096;
            component.field097 = backup.field097;
            component.field098 = backup.field098;
            component.field099 = backup.field099;
            component.field100 = backup.field100;
        }

        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.PredictDeltaDelegate))]
        private static void PredictDelta(IntPtr snapshotData, IntPtr baseline1Data, IntPtr baseline2Data, ref GhostDeltaPredictor predictor)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline1 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline1Data);
            ref var baseline2 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline2Data);
            snapshot.field000 = predictor.PredictInt(snapshot.field000, baseline1.field000, baseline2.field000);
            snapshot.field001 = predictor.PredictInt(snapshot.field001, baseline1.field001, baseline2.field001);
            snapshot.field002 = predictor.PredictInt(snapshot.field002, baseline1.field002, baseline2.field002);
            snapshot.field003 = predictor.PredictInt(snapshot.field003, baseline1.field003, baseline2.field003);
            snapshot.field004 = predictor.PredictInt(snapshot.field004, baseline1.field004, baseline2.field004);
            snapshot.field005 = predictor.PredictInt(snapshot.field005, baseline1.field005, baseline2.field005);
            snapshot.field006 = predictor.PredictInt(snapshot.field006, baseline1.field006, baseline2.field006);
            snapshot.field007 = predictor.PredictInt(snapshot.field007, baseline1.field007, baseline2.field007);
            snapshot.field008 = predictor.PredictInt(snapshot.field008, baseline1.field008, baseline2.field008);
            snapshot.field009 = predictor.PredictInt(snapshot.field009, baseline1.field009, baseline2.field009);
            snapshot.field010 = predictor.PredictInt(snapshot.field010, baseline1.field010, baseline2.field010);
            snapshot.field011 = predictor.PredictInt(snapshot.field011, baseline1.field011, baseline2.field011);
            snapshot.field012 = predictor.PredictInt(snapshot.field012, baseline1.field012, baseline2.field012);
            snapshot.field013 = predictor.PredictInt(snapshot.field013, baseline1.field013, baseline2.field013);
            snapshot.field014 = predictor.PredictInt(snapshot.field014, baseline1.field014, baseline2.field014);
            snapshot.field015 = predictor.PredictInt(snapshot.field015, baseline1.field015, baseline2.field015);
            snapshot.field016 = predictor.PredictInt(snapshot.field016, baseline1.field016, baseline2.field016);
            snapshot.field017 = predictor.PredictInt(snapshot.field017, baseline1.field017, baseline2.field017);
            snapshot.field018 = predictor.PredictInt(snapshot.field018, baseline1.field018, baseline2.field018);
            snapshot.field019 = predictor.PredictInt(snapshot.field019, baseline1.field019, baseline2.field019);
            snapshot.field020 = predictor.PredictInt(snapshot.field020, baseline1.field020, baseline2.field020);
            snapshot.field021 = predictor.PredictInt(snapshot.field021, baseline1.field021, baseline2.field021);
            snapshot.field022 = predictor.PredictInt(snapshot.field022, baseline1.field022, baseline2.field022);
            snapshot.field023 = predictor.PredictInt(snapshot.field023, baseline1.field023, baseline2.field023);
            snapshot.field024 = predictor.PredictInt(snapshot.field024, baseline1.field024, baseline2.field024);
            snapshot.field025 = predictor.PredictInt(snapshot.field025, baseline1.field025, baseline2.field025);
            snapshot.field026 = predictor.PredictInt(snapshot.field026, baseline1.field026, baseline2.field026);
            snapshot.field027 = predictor.PredictInt(snapshot.field027, baseline1.field027, baseline2.field027);
            snapshot.field028 = predictor.PredictInt(snapshot.field028, baseline1.field028, baseline2.field028);
            snapshot.field029 = predictor.PredictInt(snapshot.field029, baseline1.field029, baseline2.field029);
            snapshot.field030 = predictor.PredictInt(snapshot.field030, baseline1.field030, baseline2.field030);
            snapshot.field031 = predictor.PredictInt(snapshot.field031, baseline1.field031, baseline2.field031);
            snapshot.field032 = predictor.PredictInt(snapshot.field032, baseline1.field032, baseline2.field032);
            snapshot.field033 = predictor.PredictInt(snapshot.field033, baseline1.field033, baseline2.field033);
            snapshot.field034 = predictor.PredictInt(snapshot.field034, baseline1.field034, baseline2.field034);
            snapshot.field035 = predictor.PredictInt(snapshot.field035, baseline1.field035, baseline2.field035);
            snapshot.field036 = predictor.PredictInt(snapshot.field036, baseline1.field036, baseline2.field036);
            snapshot.field037 = predictor.PredictInt(snapshot.field037, baseline1.field037, baseline2.field037);
            snapshot.field038 = predictor.PredictInt(snapshot.field038, baseline1.field038, baseline2.field038);
            snapshot.field039 = predictor.PredictInt(snapshot.field039, baseline1.field039, baseline2.field039);
            snapshot.field040 = predictor.PredictInt(snapshot.field040, baseline1.field040, baseline2.field040);
            snapshot.field041 = predictor.PredictInt(snapshot.field041, baseline1.field041, baseline2.field041);
            snapshot.field042 = predictor.PredictInt(snapshot.field042, baseline1.field042, baseline2.field042);
            snapshot.field043 = predictor.PredictInt(snapshot.field043, baseline1.field043, baseline2.field043);
            snapshot.field044 = predictor.PredictInt(snapshot.field044, baseline1.field044, baseline2.field044);
            snapshot.field045 = predictor.PredictInt(snapshot.field045, baseline1.field045, baseline2.field045);
            snapshot.field046 = predictor.PredictInt(snapshot.field046, baseline1.field046, baseline2.field046);
            snapshot.field047 = predictor.PredictInt(snapshot.field047, baseline1.field047, baseline2.field047);
            snapshot.field048 = predictor.PredictInt(snapshot.field048, baseline1.field048, baseline2.field048);
            snapshot.field049 = predictor.PredictInt(snapshot.field049, baseline1.field049, baseline2.field049);
            snapshot.field050 = predictor.PredictInt(snapshot.field050, baseline1.field050, baseline2.field050);
            snapshot.field051 = predictor.PredictInt(snapshot.field051, baseline1.field051, baseline2.field051);
            snapshot.field052 = predictor.PredictInt(snapshot.field052, baseline1.field052, baseline2.field052);
            snapshot.field053 = predictor.PredictInt(snapshot.field053, baseline1.field053, baseline2.field053);
            snapshot.field054 = predictor.PredictInt(snapshot.field054, baseline1.field054, baseline2.field054);
            snapshot.field055 = predictor.PredictInt(snapshot.field055, baseline1.field055, baseline2.field055);
            snapshot.field056 = predictor.PredictInt(snapshot.field056, baseline1.field056, baseline2.field056);
            snapshot.field057 = predictor.PredictInt(snapshot.field057, baseline1.field057, baseline2.field057);
            snapshot.field058 = predictor.PredictInt(snapshot.field058, baseline1.field058, baseline2.field058);
            snapshot.field059 = predictor.PredictInt(snapshot.field059, baseline1.field059, baseline2.field059);
            snapshot.field060 = predictor.PredictInt(snapshot.field060, baseline1.field060, baseline2.field060);
            snapshot.field061 = predictor.PredictInt(snapshot.field061, baseline1.field061, baseline2.field061);
            snapshot.field062 = predictor.PredictInt(snapshot.field062, baseline1.field062, baseline2.field062);
            snapshot.field063 = predictor.PredictInt(snapshot.field063, baseline1.field063, baseline2.field063);
            snapshot.field064 = predictor.PredictInt(snapshot.field064, baseline1.field064, baseline2.field064);
            snapshot.field065 = predictor.PredictInt(snapshot.field065, baseline1.field065, baseline2.field065);
            snapshot.field066 = predictor.PredictInt(snapshot.field066, baseline1.field066, baseline2.field066);
            snapshot.field067 = predictor.PredictInt(snapshot.field067, baseline1.field067, baseline2.field067);
            snapshot.field068 = predictor.PredictInt(snapshot.field068, baseline1.field068, baseline2.field068);
            snapshot.field069 = predictor.PredictInt(snapshot.field069, baseline1.field069, baseline2.field069);
            snapshot.field070 = predictor.PredictInt(snapshot.field070, baseline1.field070, baseline2.field070);
            snapshot.field071 = predictor.PredictInt(snapshot.field071, baseline1.field071, baseline2.field071);
            snapshot.field072 = predictor.PredictInt(snapshot.field072, baseline1.field072, baseline2.field072);
            snapshot.field073 = predictor.PredictInt(snapshot.field073, baseline1.field073, baseline2.field073);
            snapshot.field074 = predictor.PredictInt(snapshot.field074, baseline1.field074, baseline2.field074);
            snapshot.field075 = predictor.PredictInt(snapshot.field075, baseline1.field075, baseline2.field075);
            snapshot.field076 = predictor.PredictInt(snapshot.field076, baseline1.field076, baseline2.field076);
            snapshot.field077 = predictor.PredictInt(snapshot.field077, baseline1.field077, baseline2.field077);
            snapshot.field078 = predictor.PredictInt(snapshot.field078, baseline1.field078, baseline2.field078);
            snapshot.field079 = predictor.PredictInt(snapshot.field079, baseline1.field079, baseline2.field079);
            snapshot.field080 = predictor.PredictInt(snapshot.field080, baseline1.field080, baseline2.field080);
            snapshot.field081 = predictor.PredictInt(snapshot.field081, baseline1.field081, baseline2.field081);
            snapshot.field082 = predictor.PredictInt(snapshot.field082, baseline1.field082, baseline2.field082);
            snapshot.field083 = predictor.PredictInt(snapshot.field083, baseline1.field083, baseline2.field083);
            snapshot.field084 = predictor.PredictInt(snapshot.field084, baseline1.field084, baseline2.field084);
            snapshot.field085 = predictor.PredictInt(snapshot.field085, baseline1.field085, baseline2.field085);
            snapshot.field086 = predictor.PredictInt(snapshot.field086, baseline1.field086, baseline2.field086);
            snapshot.field087 = predictor.PredictInt(snapshot.field087, baseline1.field087, baseline2.field087);
            snapshot.field088 = predictor.PredictInt(snapshot.field088, baseline1.field088, baseline2.field088);
            snapshot.field089 = predictor.PredictInt(snapshot.field089, baseline1.field089, baseline2.field089);
            snapshot.field090 = predictor.PredictInt(snapshot.field090, baseline1.field090, baseline2.field090);
            snapshot.field091 = predictor.PredictInt(snapshot.field091, baseline1.field091, baseline2.field091);
            snapshot.field092 = predictor.PredictInt(snapshot.field092, baseline1.field092, baseline2.field092);
            snapshot.field093 = predictor.PredictInt(snapshot.field093, baseline1.field093, baseline2.field093);
            snapshot.field094 = predictor.PredictInt(snapshot.field094, baseline1.field094, baseline2.field094);
            snapshot.field095 = predictor.PredictInt(snapshot.field095, baseline1.field095, baseline2.field095);
            snapshot.field096 = predictor.PredictInt(snapshot.field096, baseline1.field096, baseline2.field096);
            snapshot.field097 = predictor.PredictInt(snapshot.field097, baseline1.field097, baseline2.field097);
            snapshot.field098 = predictor.PredictInt(snapshot.field098, baseline1.field098, baseline2.field098);
            snapshot.field099 = predictor.PredictInt(snapshot.field099, baseline1.field099, baseline2.field099);
            snapshot.field100 = predictor.PredictInt(snapshot.field100, baseline1.field100, baseline2.field100);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CalculateChangeMaskDelegate))]
        private static void CalculateChangeMask(IntPtr snapshotData, IntPtr baselineData, IntPtr bits, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask;
            changeMask = (snapshot.field000 != baseline.field000) ? 1u : 0;
            changeMask |= (snapshot.field001 != baseline.field001) ? (1u<<1) : 0;
            changeMask |= (snapshot.field002 != baseline.field002) ? (1u<<2) : 0;
            changeMask |= (snapshot.field003 != baseline.field003) ? (1u<<3) : 0;
            changeMask |= (snapshot.field004 != baseline.field004) ? (1u<<4) : 0;
            changeMask |= (snapshot.field005 != baseline.field005) ? (1u<<5) : 0;
            changeMask |= (snapshot.field006 != baseline.field006) ? (1u<<6) : 0;
            changeMask |= (snapshot.field007 != baseline.field007) ? (1u<<7) : 0;
            changeMask |= (snapshot.field008 != baseline.field008) ? (1u<<8) : 0;
            changeMask |= (snapshot.field009 != baseline.field009) ? (1u<<9) : 0;
            changeMask |= (snapshot.field010 != baseline.field010) ? (1u<<10) : 0;
            changeMask |= (snapshot.field011 != baseline.field011) ? (1u<<11) : 0;
            changeMask |= (snapshot.field012 != baseline.field012) ? (1u<<12) : 0;
            changeMask |= (snapshot.field013 != baseline.field013) ? (1u<<13) : 0;
            changeMask |= (snapshot.field014 != baseline.field014) ? (1u<<14) : 0;
            changeMask |= (snapshot.field015 != baseline.field015) ? (1u<<15) : 0;
            changeMask |= (snapshot.field016 != baseline.field016) ? (1u<<16) : 0;
            changeMask |= (snapshot.field017 != baseline.field017) ? (1u<<17) : 0;
            changeMask |= (snapshot.field018 != baseline.field018) ? (1u<<18) : 0;
            changeMask |= (snapshot.field019 != baseline.field019) ? (1u<<19) : 0;
            changeMask |= (snapshot.field020 != baseline.field020) ? (1u<<20) : 0;
            changeMask |= (snapshot.field021 != baseline.field021) ? (1u<<21) : 0;
            changeMask |= (snapshot.field022 != baseline.field022) ? (1u<<22) : 0;
            changeMask |= (snapshot.field023 != baseline.field023) ? (1u<<23) : 0;
            changeMask |= (snapshot.field024 != baseline.field024) ? (1u<<24) : 0;
            changeMask |= (snapshot.field025 != baseline.field025) ? (1u<<25) : 0;
            changeMask |= (snapshot.field026 != baseline.field026) ? (1u<<26) : 0;
            changeMask |= (snapshot.field027 != baseline.field027) ? (1u<<27) : 0;
            changeMask |= (snapshot.field028 != baseline.field028) ? (1u<<28) : 0;
            changeMask |= (snapshot.field029 != baseline.field029) ? (1u<<29) : 0;
            changeMask |= (snapshot.field030 != baseline.field030) ? (1u<<30) : 0;
            changeMask |= (snapshot.field031 != baseline.field031) ? (1u<<31) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 32);
            startOffset += 32;
            changeMask = (snapshot.field032 != baseline.field032) ? 1u : 0;
            changeMask |= (snapshot.field033 != baseline.field033) ? (1u<<1) : 0;
            changeMask |= (snapshot.field034 != baseline.field034) ? (1u<<2) : 0;
            changeMask |= (snapshot.field035 != baseline.field035) ? (1u<<3) : 0;
            changeMask |= (snapshot.field036 != baseline.field036) ? (1u<<4) : 0;
            changeMask |= (snapshot.field037 != baseline.field037) ? (1u<<5) : 0;
            changeMask |= (snapshot.field038 != baseline.field038) ? (1u<<6) : 0;
            changeMask |= (snapshot.field039 != baseline.field039) ? (1u<<7) : 0;
            changeMask |= (snapshot.field040 != baseline.field040) ? (1u<<8) : 0;
            changeMask |= (snapshot.field041 != baseline.field041) ? (1u<<9) : 0;
            changeMask |= (snapshot.field042 != baseline.field042) ? (1u<<10) : 0;
            changeMask |= (snapshot.field043 != baseline.field043) ? (1u<<11) : 0;
            changeMask |= (snapshot.field044 != baseline.field044) ? (1u<<12) : 0;
            changeMask |= (snapshot.field045 != baseline.field045) ? (1u<<13) : 0;
            changeMask |= (snapshot.field046 != baseline.field046) ? (1u<<14) : 0;
            changeMask |= (snapshot.field047 != baseline.field047) ? (1u<<15) : 0;
            changeMask |= (snapshot.field048 != baseline.field048) ? (1u<<16) : 0;
            changeMask |= (snapshot.field049 != baseline.field049) ? (1u<<17) : 0;
            changeMask |= (snapshot.field050 != baseline.field050) ? (1u<<18) : 0;
            changeMask |= (snapshot.field051 != baseline.field051) ? (1u<<19) : 0;
            changeMask |= (snapshot.field052 != baseline.field052) ? (1u<<20) : 0;
            changeMask |= (snapshot.field053 != baseline.field053) ? (1u<<21) : 0;
            changeMask |= (snapshot.field054 != baseline.field054) ? (1u<<22) : 0;
            changeMask |= (snapshot.field055 != baseline.field055) ? (1u<<23) : 0;
            changeMask |= (snapshot.field056 != baseline.field056) ? (1u<<24) : 0;
            changeMask |= (snapshot.field057 != baseline.field057) ? (1u<<25) : 0;
            changeMask |= (snapshot.field058 != baseline.field058) ? (1u<<26) : 0;
            changeMask |= (snapshot.field059 != baseline.field059) ? (1u<<27) : 0;
            changeMask |= (snapshot.field060 != baseline.field060) ? (1u<<28) : 0;
            changeMask |= (snapshot.field061 != baseline.field061) ? (1u<<29) : 0;
            changeMask |= (snapshot.field062 != baseline.field062) ? (1u<<30) : 0;
            changeMask |= (snapshot.field063 != baseline.field063) ? (1u<<31) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 32);
            startOffset += 32;
            changeMask = (snapshot.field064 != baseline.field064) ? 1u : 0;
            changeMask |= (snapshot.field065 != baseline.field065) ? (1u<<1) : 0;
            changeMask |= (snapshot.field066 != baseline.field066) ? (1u<<2) : 0;
            changeMask |= (snapshot.field067 != baseline.field067) ? (1u<<3) : 0;
            changeMask |= (snapshot.field068 != baseline.field068) ? (1u<<4) : 0;
            changeMask |= (snapshot.field069 != baseline.field069) ? (1u<<5) : 0;
            changeMask |= (snapshot.field070 != baseline.field070) ? (1u<<6) : 0;
            changeMask |= (snapshot.field071 != baseline.field071) ? (1u<<7) : 0;
            changeMask |= (snapshot.field072 != baseline.field072) ? (1u<<8) : 0;
            changeMask |= (snapshot.field073 != baseline.field073) ? (1u<<9) : 0;
            changeMask |= (snapshot.field074 != baseline.field074) ? (1u<<10) : 0;
            changeMask |= (snapshot.field075 != baseline.field075) ? (1u<<11) : 0;
            changeMask |= (snapshot.field076 != baseline.field076) ? (1u<<12) : 0;
            changeMask |= (snapshot.field077 != baseline.field077) ? (1u<<13) : 0;
            changeMask |= (snapshot.field078 != baseline.field078) ? (1u<<14) : 0;
            changeMask |= (snapshot.field079 != baseline.field079) ? (1u<<15) : 0;
            changeMask |= (snapshot.field080 != baseline.field080) ? (1u<<16) : 0;
            changeMask |= (snapshot.field081 != baseline.field081) ? (1u<<17) : 0;
            changeMask |= (snapshot.field082 != baseline.field082) ? (1u<<18) : 0;
            changeMask |= (snapshot.field083 != baseline.field083) ? (1u<<19) : 0;
            changeMask |= (snapshot.field084 != baseline.field084) ? (1u<<20) : 0;
            changeMask |= (snapshot.field085 != baseline.field085) ? (1u<<21) : 0;
            changeMask |= (snapshot.field086 != baseline.field086) ? (1u<<22) : 0;
            changeMask |= (snapshot.field087 != baseline.field087) ? (1u<<23) : 0;
            changeMask |= (snapshot.field088 != baseline.field088) ? (1u<<24) : 0;
            changeMask |= (snapshot.field089 != baseline.field089) ? (1u<<25) : 0;
            changeMask |= (snapshot.field090 != baseline.field090) ? (1u<<26) : 0;
            changeMask |= (snapshot.field091 != baseline.field091) ? (1u<<27) : 0;
            changeMask |= (snapshot.field092 != baseline.field092) ? (1u<<28) : 0;
            changeMask |= (snapshot.field093 != baseline.field093) ? (1u<<29) : 0;
            changeMask |= (snapshot.field094 != baseline.field094) ? (1u<<30) : 0;
            changeMask |= (snapshot.field095 != baseline.field095) ? (1u<<31) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 32);
            startOffset += 32;
            changeMask = (snapshot.field096 != baseline.field096) ? 1u : 0;
            changeMask |= (snapshot.field097 != baseline.field097) ? (1u<<1) : 0;
            changeMask |= (snapshot.field098 != baseline.field098) ? (1u<<2) : 0;
            changeMask |= (snapshot.field099 != baseline.field099) ? (1u<<3) : 0;
            changeMask |= (snapshot.field100 != baseline.field100) ? (1u<<4) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 5);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.SerializeDelegate))]
        private static void Serialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamWriter writer, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedIntDelta(snapshot.field000, baseline.field000, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.field001, baseline.field001, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedIntDelta(snapshot.field002, baseline.field002, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedIntDelta(snapshot.field003, baseline.field003, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedIntDelta(snapshot.field004, baseline.field004, compressionModel);
            if ((changeMask & (1 << 5)) != 0)
                writer.WritePackedIntDelta(snapshot.field005, baseline.field005, compressionModel);
            if ((changeMask & (1 << 6)) != 0)
                writer.WritePackedIntDelta(snapshot.field006, baseline.field006, compressionModel);
            if ((changeMask & (1 << 7)) != 0)
                writer.WritePackedIntDelta(snapshot.field007, baseline.field007, compressionModel);
            if ((changeMask & (1 << 8)) != 0)
                writer.WritePackedIntDelta(snapshot.field008, baseline.field008, compressionModel);
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedIntDelta(snapshot.field009, baseline.field009, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedIntDelta(snapshot.field010, baseline.field010, compressionModel);
            if ((changeMask & (1 << 11)) != 0)
                writer.WritePackedIntDelta(snapshot.field011, baseline.field011, compressionModel);
            if ((changeMask & (1 << 12)) != 0)
                writer.WritePackedIntDelta(snapshot.field012, baseline.field012, compressionModel);
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedIntDelta(snapshot.field013, baseline.field013, compressionModel);
            if ((changeMask & (1 << 14)) != 0)
                writer.WritePackedIntDelta(snapshot.field014, baseline.field014, compressionModel);
            if ((changeMask & (1 << 15)) != 0)
                writer.WritePackedIntDelta(snapshot.field015, baseline.field015, compressionModel);
            if ((changeMask & (1 << 16)) != 0)
                writer.WritePackedIntDelta(snapshot.field016, baseline.field016, compressionModel);
            if ((changeMask & (1 << 17)) != 0)
                writer.WritePackedIntDelta(snapshot.field017, baseline.field017, compressionModel);
            if ((changeMask & (1 << 18)) != 0)
                writer.WritePackedIntDelta(snapshot.field018, baseline.field018, compressionModel);
            if ((changeMask & (1 << 19)) != 0)
                writer.WritePackedIntDelta(snapshot.field019, baseline.field019, compressionModel);
            if ((changeMask & (1 << 20)) != 0)
                writer.WritePackedIntDelta(snapshot.field020, baseline.field020, compressionModel);
            if ((changeMask & (1 << 21)) != 0)
                writer.WritePackedIntDelta(snapshot.field021, baseline.field021, compressionModel);
            if ((changeMask & (1 << 22)) != 0)
                writer.WritePackedIntDelta(snapshot.field022, baseline.field022, compressionModel);
            if ((changeMask & (1 << 23)) != 0)
                writer.WritePackedIntDelta(snapshot.field023, baseline.field023, compressionModel);
            if ((changeMask & (1 << 24)) != 0)
                writer.WritePackedIntDelta(snapshot.field024, baseline.field024, compressionModel);
            if ((changeMask & (1 << 25)) != 0)
                writer.WritePackedIntDelta(snapshot.field025, baseline.field025, compressionModel);
            if ((changeMask & (1 << 26)) != 0)
                writer.WritePackedIntDelta(snapshot.field026, baseline.field026, compressionModel);
            if ((changeMask & (1 << 27)) != 0)
                writer.WritePackedIntDelta(snapshot.field027, baseline.field027, compressionModel);
            if ((changeMask & (1 << 28)) != 0)
                writer.WritePackedIntDelta(snapshot.field028, baseline.field028, compressionModel);
            if ((changeMask & (1 << 29)) != 0)
                writer.WritePackedIntDelta(snapshot.field029, baseline.field029, compressionModel);
            if ((changeMask & (1 << 30)) != 0)
                writer.WritePackedIntDelta(snapshot.field030, baseline.field030, compressionModel);
            if ((changeMask & (1 << 31)) != 0)
                writer.WritePackedIntDelta(snapshot.field031, baseline.field031, compressionModel);
            changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset + 32, ChangeMaskBits - 32);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedIntDelta(snapshot.field032, baseline.field032, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.field033, baseline.field033, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedIntDelta(snapshot.field034, baseline.field034, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedIntDelta(snapshot.field035, baseline.field035, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedIntDelta(snapshot.field036, baseline.field036, compressionModel);
            if ((changeMask & (1 << 5)) != 0)
                writer.WritePackedIntDelta(snapshot.field037, baseline.field037, compressionModel);
            if ((changeMask & (1 << 6)) != 0)
                writer.WritePackedIntDelta(snapshot.field038, baseline.field038, compressionModel);
            if ((changeMask & (1 << 7)) != 0)
                writer.WritePackedIntDelta(snapshot.field039, baseline.field039, compressionModel);
            if ((changeMask & (1 << 8)) != 0)
                writer.WritePackedIntDelta(snapshot.field040, baseline.field040, compressionModel);
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedIntDelta(snapshot.field041, baseline.field041, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedIntDelta(snapshot.field042, baseline.field042, compressionModel);
            if ((changeMask & (1 << 11)) != 0)
                writer.WritePackedIntDelta(snapshot.field043, baseline.field043, compressionModel);
            if ((changeMask & (1 << 12)) != 0)
                writer.WritePackedIntDelta(snapshot.field044, baseline.field044, compressionModel);
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedIntDelta(snapshot.field045, baseline.field045, compressionModel);
            if ((changeMask & (1 << 14)) != 0)
                writer.WritePackedIntDelta(snapshot.field046, baseline.field046, compressionModel);
            if ((changeMask & (1 << 15)) != 0)
                writer.WritePackedIntDelta(snapshot.field047, baseline.field047, compressionModel);
            if ((changeMask & (1 << 16)) != 0)
                writer.WritePackedIntDelta(snapshot.field048, baseline.field048, compressionModel);
            if ((changeMask & (1 << 17)) != 0)
                writer.WritePackedIntDelta(snapshot.field049, baseline.field049, compressionModel);
            if ((changeMask & (1 << 18)) != 0)
                writer.WritePackedIntDelta(snapshot.field050, baseline.field050, compressionModel);
            if ((changeMask & (1 << 19)) != 0)
                writer.WritePackedIntDelta(snapshot.field051, baseline.field051, compressionModel);
            if ((changeMask & (1 << 20)) != 0)
                writer.WritePackedIntDelta(snapshot.field052, baseline.field052, compressionModel);
            if ((changeMask & (1 << 21)) != 0)
                writer.WritePackedIntDelta(snapshot.field053, baseline.field053, compressionModel);
            if ((changeMask & (1 << 22)) != 0)
                writer.WritePackedIntDelta(snapshot.field054, baseline.field054, compressionModel);
            if ((changeMask & (1 << 23)) != 0)
                writer.WritePackedIntDelta(snapshot.field055, baseline.field055, compressionModel);
            if ((changeMask & (1 << 24)) != 0)
                writer.WritePackedIntDelta(snapshot.field056, baseline.field056, compressionModel);
            if ((changeMask & (1 << 25)) != 0)
                writer.WritePackedIntDelta(snapshot.field057, baseline.field057, compressionModel);
            if ((changeMask & (1 << 26)) != 0)
                writer.WritePackedIntDelta(snapshot.field058, baseline.field058, compressionModel);
            if ((changeMask & (1 << 27)) != 0)
                writer.WritePackedIntDelta(snapshot.field059, baseline.field059, compressionModel);
            if ((changeMask & (1 << 28)) != 0)
                writer.WritePackedIntDelta(snapshot.field060, baseline.field060, compressionModel);
            if ((changeMask & (1 << 29)) != 0)
                writer.WritePackedIntDelta(snapshot.field061, baseline.field061, compressionModel);
            if ((changeMask & (1 << 30)) != 0)
                writer.WritePackedIntDelta(snapshot.field062, baseline.field062, compressionModel);
            if ((changeMask & (1 << 31)) != 0)
                writer.WritePackedIntDelta(snapshot.field063, baseline.field063, compressionModel);
            changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset + 64, ChangeMaskBits - 64);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedIntDelta(snapshot.field064, baseline.field064, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.field065, baseline.field065, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedIntDelta(snapshot.field066, baseline.field066, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedIntDelta(snapshot.field067, baseline.field067, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedIntDelta(snapshot.field068, baseline.field068, compressionModel);
            if ((changeMask & (1 << 5)) != 0)
                writer.WritePackedIntDelta(snapshot.field069, baseline.field069, compressionModel);
            if ((changeMask & (1 << 6)) != 0)
                writer.WritePackedIntDelta(snapshot.field070, baseline.field070, compressionModel);
            if ((changeMask & (1 << 7)) != 0)
                writer.WritePackedIntDelta(snapshot.field071, baseline.field071, compressionModel);
            if ((changeMask & (1 << 8)) != 0)
                writer.WritePackedIntDelta(snapshot.field072, baseline.field072, compressionModel);
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedIntDelta(snapshot.field073, baseline.field073, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedIntDelta(snapshot.field074, baseline.field074, compressionModel);
            if ((changeMask & (1 << 11)) != 0)
                writer.WritePackedIntDelta(snapshot.field075, baseline.field075, compressionModel);
            if ((changeMask & (1 << 12)) != 0)
                writer.WritePackedIntDelta(snapshot.field076, baseline.field076, compressionModel);
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedIntDelta(snapshot.field077, baseline.field077, compressionModel);
            if ((changeMask & (1 << 14)) != 0)
                writer.WritePackedIntDelta(snapshot.field078, baseline.field078, compressionModel);
            if ((changeMask & (1 << 15)) != 0)
                writer.WritePackedIntDelta(snapshot.field079, baseline.field079, compressionModel);
            if ((changeMask & (1 << 16)) != 0)
                writer.WritePackedIntDelta(snapshot.field080, baseline.field080, compressionModel);
            if ((changeMask & (1 << 17)) != 0)
                writer.WritePackedIntDelta(snapshot.field081, baseline.field081, compressionModel);
            if ((changeMask & (1 << 18)) != 0)
                writer.WritePackedIntDelta(snapshot.field082, baseline.field082, compressionModel);
            if ((changeMask & (1 << 19)) != 0)
                writer.WritePackedIntDelta(snapshot.field083, baseline.field083, compressionModel);
            if ((changeMask & (1 << 20)) != 0)
                writer.WritePackedIntDelta(snapshot.field084, baseline.field084, compressionModel);
            if ((changeMask & (1 << 21)) != 0)
                writer.WritePackedIntDelta(snapshot.field085, baseline.field085, compressionModel);
            if ((changeMask & (1 << 22)) != 0)
                writer.WritePackedIntDelta(snapshot.field086, baseline.field086, compressionModel);
            if ((changeMask & (1 << 23)) != 0)
                writer.WritePackedIntDelta(snapshot.field087, baseline.field087, compressionModel);
            if ((changeMask & (1 << 24)) != 0)
                writer.WritePackedIntDelta(snapshot.field088, baseline.field088, compressionModel);
            if ((changeMask & (1 << 25)) != 0)
                writer.WritePackedIntDelta(snapshot.field089, baseline.field089, compressionModel);
            if ((changeMask & (1 << 26)) != 0)
                writer.WritePackedIntDelta(snapshot.field090, baseline.field090, compressionModel);
            if ((changeMask & (1 << 27)) != 0)
                writer.WritePackedIntDelta(snapshot.field091, baseline.field091, compressionModel);
            if ((changeMask & (1 << 28)) != 0)
                writer.WritePackedIntDelta(snapshot.field092, baseline.field092, compressionModel);
            if ((changeMask & (1 << 29)) != 0)
                writer.WritePackedIntDelta(snapshot.field093, baseline.field093, compressionModel);
            if ((changeMask & (1 << 30)) != 0)
                writer.WritePackedIntDelta(snapshot.field094, baseline.field094, compressionModel);
            if ((changeMask & (1 << 31)) != 0)
                writer.WritePackedIntDelta(snapshot.field095, baseline.field095, compressionModel);
            changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset + 96, ChangeMaskBits - 96);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedIntDelta(snapshot.field096, baseline.field096, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.field097, baseline.field097, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedIntDelta(snapshot.field098, baseline.field098, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedIntDelta(snapshot.field099, baseline.field099, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedIntDelta(snapshot.field100, baseline.field100, compressionModel);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.DeserializeDelegate))]
        private static void Deserialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamReader reader, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.field000 = reader.ReadPackedIntDelta(baseline.field000, compressionModel);
            else
                snapshot.field000 = baseline.field000;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.field001 = reader.ReadPackedIntDelta(baseline.field001, compressionModel);
            else
                snapshot.field001 = baseline.field001;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.field002 = reader.ReadPackedIntDelta(baseline.field002, compressionModel);
            else
                snapshot.field002 = baseline.field002;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.field003 = reader.ReadPackedIntDelta(baseline.field003, compressionModel);
            else
                snapshot.field003 = baseline.field003;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.field004 = reader.ReadPackedIntDelta(baseline.field004, compressionModel);
            else
                snapshot.field004 = baseline.field004;
            if ((changeMask & (1 << 5)) != 0)
                snapshot.field005 = reader.ReadPackedIntDelta(baseline.field005, compressionModel);
            else
                snapshot.field005 = baseline.field005;
            if ((changeMask & (1 << 6)) != 0)
                snapshot.field006 = reader.ReadPackedIntDelta(baseline.field006, compressionModel);
            else
                snapshot.field006 = baseline.field006;
            if ((changeMask & (1 << 7)) != 0)
                snapshot.field007 = reader.ReadPackedIntDelta(baseline.field007, compressionModel);
            else
                snapshot.field007 = baseline.field007;
            if ((changeMask & (1 << 8)) != 0)
                snapshot.field008 = reader.ReadPackedIntDelta(baseline.field008, compressionModel);
            else
                snapshot.field008 = baseline.field008;
            if ((changeMask & (1 << 9)) != 0)
                snapshot.field009 = reader.ReadPackedIntDelta(baseline.field009, compressionModel);
            else
                snapshot.field009 = baseline.field009;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.field010 = reader.ReadPackedIntDelta(baseline.field010, compressionModel);
            else
                snapshot.field010 = baseline.field010;
            if ((changeMask & (1 << 11)) != 0)
                snapshot.field011 = reader.ReadPackedIntDelta(baseline.field011, compressionModel);
            else
                snapshot.field011 = baseline.field011;
            if ((changeMask & (1 << 12)) != 0)
                snapshot.field012 = reader.ReadPackedIntDelta(baseline.field012, compressionModel);
            else
                snapshot.field012 = baseline.field012;
            if ((changeMask & (1 << 13)) != 0)
                snapshot.field013 = reader.ReadPackedIntDelta(baseline.field013, compressionModel);
            else
                snapshot.field013 = baseline.field013;
            if ((changeMask & (1 << 14)) != 0)
                snapshot.field014 = reader.ReadPackedIntDelta(baseline.field014, compressionModel);
            else
                snapshot.field014 = baseline.field014;
            if ((changeMask & (1 << 15)) != 0)
                snapshot.field015 = reader.ReadPackedIntDelta(baseline.field015, compressionModel);
            else
                snapshot.field015 = baseline.field015;
            if ((changeMask & (1 << 16)) != 0)
                snapshot.field016 = reader.ReadPackedIntDelta(baseline.field016, compressionModel);
            else
                snapshot.field016 = baseline.field016;
            if ((changeMask & (1 << 17)) != 0)
                snapshot.field017 = reader.ReadPackedIntDelta(baseline.field017, compressionModel);
            else
                snapshot.field017 = baseline.field017;
            if ((changeMask & (1 << 18)) != 0)
                snapshot.field018 = reader.ReadPackedIntDelta(baseline.field018, compressionModel);
            else
                snapshot.field018 = baseline.field018;
            if ((changeMask & (1 << 19)) != 0)
                snapshot.field019 = reader.ReadPackedIntDelta(baseline.field019, compressionModel);
            else
                snapshot.field019 = baseline.field019;
            if ((changeMask & (1 << 20)) != 0)
                snapshot.field020 = reader.ReadPackedIntDelta(baseline.field020, compressionModel);
            else
                snapshot.field020 = baseline.field020;
            if ((changeMask & (1 << 21)) != 0)
                snapshot.field021 = reader.ReadPackedIntDelta(baseline.field021, compressionModel);
            else
                snapshot.field021 = baseline.field021;
            if ((changeMask & (1 << 22)) != 0)
                snapshot.field022 = reader.ReadPackedIntDelta(baseline.field022, compressionModel);
            else
                snapshot.field022 = baseline.field022;
            if ((changeMask & (1 << 23)) != 0)
                snapshot.field023 = reader.ReadPackedIntDelta(baseline.field023, compressionModel);
            else
                snapshot.field023 = baseline.field023;
            if ((changeMask & (1 << 24)) != 0)
                snapshot.field024 = reader.ReadPackedIntDelta(baseline.field024, compressionModel);
            else
                snapshot.field024 = baseline.field024;
            if ((changeMask & (1 << 25)) != 0)
                snapshot.field025 = reader.ReadPackedIntDelta(baseline.field025, compressionModel);
            else
                snapshot.field025 = baseline.field025;
            if ((changeMask & (1 << 26)) != 0)
                snapshot.field026 = reader.ReadPackedIntDelta(baseline.field026, compressionModel);
            else
                snapshot.field026 = baseline.field026;
            if ((changeMask & (1 << 27)) != 0)
                snapshot.field027 = reader.ReadPackedIntDelta(baseline.field027, compressionModel);
            else
                snapshot.field027 = baseline.field027;
            if ((changeMask & (1 << 28)) != 0)
                snapshot.field028 = reader.ReadPackedIntDelta(baseline.field028, compressionModel);
            else
                snapshot.field028 = baseline.field028;
            if ((changeMask & (1 << 29)) != 0)
                snapshot.field029 = reader.ReadPackedIntDelta(baseline.field029, compressionModel);
            else
                snapshot.field029 = baseline.field029;
            if ((changeMask & (1 << 30)) != 0)
                snapshot.field030 = reader.ReadPackedIntDelta(baseline.field030, compressionModel);
            else
                snapshot.field030 = baseline.field030;
            if ((changeMask & (1 << 31)) != 0)
                snapshot.field031 = reader.ReadPackedIntDelta(baseline.field031, compressionModel);
            else
                snapshot.field031 = baseline.field031;
            changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset + 32, ChangeMaskBits - 32);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.field032 = reader.ReadPackedIntDelta(baseline.field032, compressionModel);
            else
                snapshot.field032 = baseline.field032;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.field033 = reader.ReadPackedIntDelta(baseline.field033, compressionModel);
            else
                snapshot.field033 = baseline.field033;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.field034 = reader.ReadPackedIntDelta(baseline.field034, compressionModel);
            else
                snapshot.field034 = baseline.field034;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.field035 = reader.ReadPackedIntDelta(baseline.field035, compressionModel);
            else
                snapshot.field035 = baseline.field035;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.field036 = reader.ReadPackedIntDelta(baseline.field036, compressionModel);
            else
                snapshot.field036 = baseline.field036;
            if ((changeMask & (1 << 5)) != 0)
                snapshot.field037 = reader.ReadPackedIntDelta(baseline.field037, compressionModel);
            else
                snapshot.field037 = baseline.field037;
            if ((changeMask & (1 << 6)) != 0)
                snapshot.field038 = reader.ReadPackedIntDelta(baseline.field038, compressionModel);
            else
                snapshot.field038 = baseline.field038;
            if ((changeMask & (1 << 7)) != 0)
                snapshot.field039 = reader.ReadPackedIntDelta(baseline.field039, compressionModel);
            else
                snapshot.field039 = baseline.field039;
            if ((changeMask & (1 << 8)) != 0)
                snapshot.field040 = reader.ReadPackedIntDelta(baseline.field040, compressionModel);
            else
                snapshot.field040 = baseline.field040;
            if ((changeMask & (1 << 9)) != 0)
                snapshot.field041 = reader.ReadPackedIntDelta(baseline.field041, compressionModel);
            else
                snapshot.field041 = baseline.field041;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.field042 = reader.ReadPackedIntDelta(baseline.field042, compressionModel);
            else
                snapshot.field042 = baseline.field042;
            if ((changeMask & (1 << 11)) != 0)
                snapshot.field043 = reader.ReadPackedIntDelta(baseline.field043, compressionModel);
            else
                snapshot.field043 = baseline.field043;
            if ((changeMask & (1 << 12)) != 0)
                snapshot.field044 = reader.ReadPackedIntDelta(baseline.field044, compressionModel);
            else
                snapshot.field044 = baseline.field044;
            if ((changeMask & (1 << 13)) != 0)
                snapshot.field045 = reader.ReadPackedIntDelta(baseline.field045, compressionModel);
            else
                snapshot.field045 = baseline.field045;
            if ((changeMask & (1 << 14)) != 0)
                snapshot.field046 = reader.ReadPackedIntDelta(baseline.field046, compressionModel);
            else
                snapshot.field046 = baseline.field046;
            if ((changeMask & (1 << 15)) != 0)
                snapshot.field047 = reader.ReadPackedIntDelta(baseline.field047, compressionModel);
            else
                snapshot.field047 = baseline.field047;
            if ((changeMask & (1 << 16)) != 0)
                snapshot.field048 = reader.ReadPackedIntDelta(baseline.field048, compressionModel);
            else
                snapshot.field048 = baseline.field048;
            if ((changeMask & (1 << 17)) != 0)
                snapshot.field049 = reader.ReadPackedIntDelta(baseline.field049, compressionModel);
            else
                snapshot.field049 = baseline.field049;
            if ((changeMask & (1 << 18)) != 0)
                snapshot.field050 = reader.ReadPackedIntDelta(baseline.field050, compressionModel);
            else
                snapshot.field050 = baseline.field050;
            if ((changeMask & (1 << 19)) != 0)
                snapshot.field051 = reader.ReadPackedIntDelta(baseline.field051, compressionModel);
            else
                snapshot.field051 = baseline.field051;
            if ((changeMask & (1 << 20)) != 0)
                snapshot.field052 = reader.ReadPackedIntDelta(baseline.field052, compressionModel);
            else
                snapshot.field052 = baseline.field052;
            if ((changeMask & (1 << 21)) != 0)
                snapshot.field053 = reader.ReadPackedIntDelta(baseline.field053, compressionModel);
            else
                snapshot.field053 = baseline.field053;
            if ((changeMask & (1 << 22)) != 0)
                snapshot.field054 = reader.ReadPackedIntDelta(baseline.field054, compressionModel);
            else
                snapshot.field054 = baseline.field054;
            if ((changeMask & (1 << 23)) != 0)
                snapshot.field055 = reader.ReadPackedIntDelta(baseline.field055, compressionModel);
            else
                snapshot.field055 = baseline.field055;
            if ((changeMask & (1 << 24)) != 0)
                snapshot.field056 = reader.ReadPackedIntDelta(baseline.field056, compressionModel);
            else
                snapshot.field056 = baseline.field056;
            if ((changeMask & (1 << 25)) != 0)
                snapshot.field057 = reader.ReadPackedIntDelta(baseline.field057, compressionModel);
            else
                snapshot.field057 = baseline.field057;
            if ((changeMask & (1 << 26)) != 0)
                snapshot.field058 = reader.ReadPackedIntDelta(baseline.field058, compressionModel);
            else
                snapshot.field058 = baseline.field058;
            if ((changeMask & (1 << 27)) != 0)
                snapshot.field059 = reader.ReadPackedIntDelta(baseline.field059, compressionModel);
            else
                snapshot.field059 = baseline.field059;
            if ((changeMask & (1 << 28)) != 0)
                snapshot.field060 = reader.ReadPackedIntDelta(baseline.field060, compressionModel);
            else
                snapshot.field060 = baseline.field060;
            if ((changeMask & (1 << 29)) != 0)
                snapshot.field061 = reader.ReadPackedIntDelta(baseline.field061, compressionModel);
            else
                snapshot.field061 = baseline.field061;
            if ((changeMask & (1 << 30)) != 0)
                snapshot.field062 = reader.ReadPackedIntDelta(baseline.field062, compressionModel);
            else
                snapshot.field062 = baseline.field062;
            if ((changeMask & (1 << 31)) != 0)
                snapshot.field063 = reader.ReadPackedIntDelta(baseline.field063, compressionModel);
            else
                snapshot.field063 = baseline.field063;
            changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset + 64, ChangeMaskBits - 64);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.field064 = reader.ReadPackedIntDelta(baseline.field064, compressionModel);
            else
                snapshot.field064 = baseline.field064;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.field065 = reader.ReadPackedIntDelta(baseline.field065, compressionModel);
            else
                snapshot.field065 = baseline.field065;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.field066 = reader.ReadPackedIntDelta(baseline.field066, compressionModel);
            else
                snapshot.field066 = baseline.field066;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.field067 = reader.ReadPackedIntDelta(baseline.field067, compressionModel);
            else
                snapshot.field067 = baseline.field067;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.field068 = reader.ReadPackedIntDelta(baseline.field068, compressionModel);
            else
                snapshot.field068 = baseline.field068;
            if ((changeMask & (1 << 5)) != 0)
                snapshot.field069 = reader.ReadPackedIntDelta(baseline.field069, compressionModel);
            else
                snapshot.field069 = baseline.field069;
            if ((changeMask & (1 << 6)) != 0)
                snapshot.field070 = reader.ReadPackedIntDelta(baseline.field070, compressionModel);
            else
                snapshot.field070 = baseline.field070;
            if ((changeMask & (1 << 7)) != 0)
                snapshot.field071 = reader.ReadPackedIntDelta(baseline.field071, compressionModel);
            else
                snapshot.field071 = baseline.field071;
            if ((changeMask & (1 << 8)) != 0)
                snapshot.field072 = reader.ReadPackedIntDelta(baseline.field072, compressionModel);
            else
                snapshot.field072 = baseline.field072;
            if ((changeMask & (1 << 9)) != 0)
                snapshot.field073 = reader.ReadPackedIntDelta(baseline.field073, compressionModel);
            else
                snapshot.field073 = baseline.field073;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.field074 = reader.ReadPackedIntDelta(baseline.field074, compressionModel);
            else
                snapshot.field074 = baseline.field074;
            if ((changeMask & (1 << 11)) != 0)
                snapshot.field075 = reader.ReadPackedIntDelta(baseline.field075, compressionModel);
            else
                snapshot.field075 = baseline.field075;
            if ((changeMask & (1 << 12)) != 0)
                snapshot.field076 = reader.ReadPackedIntDelta(baseline.field076, compressionModel);
            else
                snapshot.field076 = baseline.field076;
            if ((changeMask & (1 << 13)) != 0)
                snapshot.field077 = reader.ReadPackedIntDelta(baseline.field077, compressionModel);
            else
                snapshot.field077 = baseline.field077;
            if ((changeMask & (1 << 14)) != 0)
                snapshot.field078 = reader.ReadPackedIntDelta(baseline.field078, compressionModel);
            else
                snapshot.field078 = baseline.field078;
            if ((changeMask & (1 << 15)) != 0)
                snapshot.field079 = reader.ReadPackedIntDelta(baseline.field079, compressionModel);
            else
                snapshot.field079 = baseline.field079;
            if ((changeMask & (1 << 16)) != 0)
                snapshot.field080 = reader.ReadPackedIntDelta(baseline.field080, compressionModel);
            else
                snapshot.field080 = baseline.field080;
            if ((changeMask & (1 << 17)) != 0)
                snapshot.field081 = reader.ReadPackedIntDelta(baseline.field081, compressionModel);
            else
                snapshot.field081 = baseline.field081;
            if ((changeMask & (1 << 18)) != 0)
                snapshot.field082 = reader.ReadPackedIntDelta(baseline.field082, compressionModel);
            else
                snapshot.field082 = baseline.field082;
            if ((changeMask & (1 << 19)) != 0)
                snapshot.field083 = reader.ReadPackedIntDelta(baseline.field083, compressionModel);
            else
                snapshot.field083 = baseline.field083;
            if ((changeMask & (1 << 20)) != 0)
                snapshot.field084 = reader.ReadPackedIntDelta(baseline.field084, compressionModel);
            else
                snapshot.field084 = baseline.field084;
            if ((changeMask & (1 << 21)) != 0)
                snapshot.field085 = reader.ReadPackedIntDelta(baseline.field085, compressionModel);
            else
                snapshot.field085 = baseline.field085;
            if ((changeMask & (1 << 22)) != 0)
                snapshot.field086 = reader.ReadPackedIntDelta(baseline.field086, compressionModel);
            else
                snapshot.field086 = baseline.field086;
            if ((changeMask & (1 << 23)) != 0)
                snapshot.field087 = reader.ReadPackedIntDelta(baseline.field087, compressionModel);
            else
                snapshot.field087 = baseline.field087;
            if ((changeMask & (1 << 24)) != 0)
                snapshot.field088 = reader.ReadPackedIntDelta(baseline.field088, compressionModel);
            else
                snapshot.field088 = baseline.field088;
            if ((changeMask & (1 << 25)) != 0)
                snapshot.field089 = reader.ReadPackedIntDelta(baseline.field089, compressionModel);
            else
                snapshot.field089 = baseline.field089;
            if ((changeMask & (1 << 26)) != 0)
                snapshot.field090 = reader.ReadPackedIntDelta(baseline.field090, compressionModel);
            else
                snapshot.field090 = baseline.field090;
            if ((changeMask & (1 << 27)) != 0)
                snapshot.field091 = reader.ReadPackedIntDelta(baseline.field091, compressionModel);
            else
                snapshot.field091 = baseline.field091;
            if ((changeMask & (1 << 28)) != 0)
                snapshot.field092 = reader.ReadPackedIntDelta(baseline.field092, compressionModel);
            else
                snapshot.field092 = baseline.field092;
            if ((changeMask & (1 << 29)) != 0)
                snapshot.field093 = reader.ReadPackedIntDelta(baseline.field093, compressionModel);
            else
                snapshot.field093 = baseline.field093;
            if ((changeMask & (1 << 30)) != 0)
                snapshot.field094 = reader.ReadPackedIntDelta(baseline.field094, compressionModel);
            else
                snapshot.field094 = baseline.field094;
            if ((changeMask & (1 << 31)) != 0)
                snapshot.field095 = reader.ReadPackedIntDelta(baseline.field095, compressionModel);
            else
                snapshot.field095 = baseline.field095;
            changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset + 96, ChangeMaskBits - 96);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.field096 = reader.ReadPackedIntDelta(baseline.field096, compressionModel);
            else
                snapshot.field096 = baseline.field096;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.field097 = reader.ReadPackedIntDelta(baseline.field097, compressionModel);
            else
                snapshot.field097 = baseline.field097;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.field098 = reader.ReadPackedIntDelta(baseline.field098, compressionModel);
            else
                snapshot.field098 = baseline.field098;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.field099 = reader.ReadPackedIntDelta(baseline.field099, compressionModel);
            else
                snapshot.field099 = baseline.field099;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.field100 = reader.ReadPackedIntDelta(baseline.field100, compressionModel);
            else
                snapshot.field100 = baseline.field100;
        }
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.ReportPredictionErrorsDelegate))]
        private static void ReportPredictionErrors(IntPtr componentData, IntPtr backupData, ref UnsafeList<float> errors)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypes.GhostGenBigStruct>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<Unity.NetCode.Tests.GhostGenTestTypes.GhostGenBigStruct>(backupData, 0);
            int errorIndex = 0;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field000 - backup.field000));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field001 - backup.field001));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field002 - backup.field002));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field003 - backup.field003));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field004 - backup.field004));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field005 - backup.field005));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field006 - backup.field006));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field007 - backup.field007));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field008 - backup.field008));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field009 - backup.field009));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field010 - backup.field010));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field011 - backup.field011));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field012 - backup.field012));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field013 - backup.field013));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field014 - backup.field014));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field015 - backup.field015));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field016 - backup.field016));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field017 - backup.field017));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field018 - backup.field018));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field019 - backup.field019));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field020 - backup.field020));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field021 - backup.field021));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field022 - backup.field022));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field023 - backup.field023));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field024 - backup.field024));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field025 - backup.field025));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field026 - backup.field026));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field027 - backup.field027));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field028 - backup.field028));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field029 - backup.field029));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field030 - backup.field030));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field031 - backup.field031));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field032 - backup.field032));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field033 - backup.field033));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field034 - backup.field034));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field035 - backup.field035));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field036 - backup.field036));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field037 - backup.field037));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field038 - backup.field038));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field039 - backup.field039));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field040 - backup.field040));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field041 - backup.field041));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field042 - backup.field042));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field043 - backup.field043));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field044 - backup.field044));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field045 - backup.field045));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field046 - backup.field046));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field047 - backup.field047));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field048 - backup.field048));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field049 - backup.field049));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field050 - backup.field050));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field051 - backup.field051));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field052 - backup.field052));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field053 - backup.field053));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field054 - backup.field054));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field055 - backup.field055));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field056 - backup.field056));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field057 - backup.field057));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field058 - backup.field058));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field059 - backup.field059));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field060 - backup.field060));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field061 - backup.field061));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field062 - backup.field062));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field063 - backup.field063));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field064 - backup.field064));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field065 - backup.field065));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field066 - backup.field066));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field067 - backup.field067));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field068 - backup.field068));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field069 - backup.field069));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field070 - backup.field070));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field071 - backup.field071));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field072 - backup.field072));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field073 - backup.field073));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field074 - backup.field074));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field075 - backup.field075));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field076 - backup.field076));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field077 - backup.field077));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field078 - backup.field078));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field079 - backup.field079));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field080 - backup.field080));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field081 - backup.field081));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field082 - backup.field082));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field083 - backup.field083));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field084 - backup.field084));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field085 - backup.field085));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field086 - backup.field086));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field087 - backup.field087));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field088 - backup.field088));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field089 - backup.field089));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field090 - backup.field090));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field091 - backup.field091));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field092 - backup.field092));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field093 - backup.field093));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field094 - backup.field094));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field095 - backup.field095));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field096 - backup.field096));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field097 - backup.field097));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field098 - backup.field098));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field099 - backup.field099));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.field100 - backup.field100));
            ++errorIndex;
        }
        private static int GetPredictionErrorNames(ref FixedString512 names)
        {
            int nameCount = 0;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field000"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field001"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field002"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field003"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field004"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field005"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field006"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field007"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field008"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field009"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field010"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field011"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field012"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field013"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field014"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field015"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field016"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field017"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field018"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field019"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field020"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field021"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field022"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field023"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field024"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field025"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field026"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field027"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field028"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field029"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field030"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field031"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field032"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field033"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field034"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field035"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field036"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field037"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field038"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field039"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field040"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field041"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field042"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field043"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field044"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field045"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field046"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field047"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field048"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field049"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field050"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field051"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field052"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field053"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field054"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field055"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field056"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field057"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field058"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field059"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field060"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field061"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field062"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field063"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field064"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field065"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field066"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field067"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field068"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field069"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field070"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field071"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field072"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field073"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field074"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field075"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field076"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field077"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field078"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field079"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field080"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field081"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field082"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field083"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field084"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field085"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field086"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field087"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field088"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field089"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field090"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field091"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field092"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field093"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field094"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field095"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field096"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field097"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field098"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field099"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("field100"));
            ++nameCount;
            return nameCount;
        }
        #endif
    }
}
